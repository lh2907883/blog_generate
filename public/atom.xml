<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>dcs的博客</title>
  <subtitle>尽量不瞎写</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://lh2907883.github.io/blog/"/>
  <updated>2017-05-14T09:02:29.000Z</updated>
  <id>http://lh2907883.github.io/blog/</id>
  
  <author>
    <name>lihao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>web离线应用</title>
    <link href="http://lh2907883.github.io/blog/2017/05/14/web%E7%A6%BB%E7%BA%BF%E5%BA%94%E7%94%A8/"/>
    <id>http://lh2907883.github.io/blog/2017/05/14/web离线应用/</id>
    <published>2017-05-14T07:57:53.000Z</published>
    <updated>2017-05-14T09:02:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是web离线应用"><a href="#什么是web离线应用" class="headerlink" title="什么是web离线应用"></a>什么是web离线应用</h2><p>在正常情况下,客户端使用HTTP协议通过网络得到服务器的资源,然后展示,但是如果在网络断开的情况下,客户端就没办法了,这时就需要一种技术去解决这一问题,目前有两种方式:<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Using_the_application_cache" target="_blank" rel="external">AppCache</a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API/Using_Service_Workers#Browser_compatibility" target="_blank" rel="external">Service Workers</a>,他们都是通过在断网时读取本地缓存资源来实现web应用的离线访问的.</p>
<h2 id="比较AppCache和Service-Workers"><a href="#比较AppCache和Service-Workers" class="headerlink" title="比较AppCache和Service Workers"></a>比较AppCache和Service Workers</h2><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>AppCache通过指定缓存清单文件来设置哪些资源需要被缓存</p>
<p>Service Workers则有更新强大的API来通过脚本精准控制缓存(包括更新,追加,删除缓存)</p>
<h3 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h3><p>下图是各大浏览器对AppCache的支持情况,可以看出基本都支持<br><img src="https://lh2907883.github.io/store/blog/web%E7%A6%BB%E7%BA%BF%E5%BA%94%E7%94%A8/1.png" alt=""></p>
<p>而Service Workers还是有一部分浏览器不支持的(特别是移动平台)<br><img src="https://lh2907883.github.io/store/blog/web%E7%A6%BB%E7%BA%BF%E5%BA%94%E7%94%A8/2.png" alt=""></p>
<h3 id="W3C标准"><a href="#W3C标准" class="headerlink" title="W3C标准"></a>W3C标准</h3><p>如果你看过<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Using_the_application_cache" target="_blank" rel="external">AppCache</a>的文档,你会发现</p>
<blockquote>
<p>该特性已经从Web标准中删除，虽然一些浏览器目前仍然支持它，但也许会在未来的某个时间停止支持，请尽量不要使用该特性。</p>
<p>在此刻使用这里描述的应用程序缓存功能高度不鼓励; 它正在处于从Web平台中被删除的过程。请改用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API/Using_Service_Workers#Browser_compatibility" target="_blank" rel="external">Service Workers</a>代替。</p>
</blockquote>
<p>我个人认为Service Workers各方面都要优于AppCache,除了兼容性,不过既然Service Workers已经是W3C标准,想必未来的支持情况应该会好一些,所以下面我们将详细讨论Service Workers的用法</p>
<h2 id="使用Service-Workers的前提条件"><a href="#使用Service-Workers的前提条件" class="headerlink" title="使用Service Workers的前提条件"></a>使用Service Workers的前提条件</h2><blockquote>
<p>在已经支持 serivce workers 的浏览器的版本中, 很多特性没有默认开启, 需要开启一下浏览器的相关配置：</p>
<ul>
<li>Firefox Nightly: 访问 about:config 并设置 dom.serviceWorkers.enabled 的值为 true; 重启浏览器；</li>
<li>Chrome Canary: 访问 chrome://flags 并开启 experimental-web-platform-features; 重启浏览器 (注意：有些特性在Chrome中没有默认开放支持)；</li>
<li>Opera: 访问 opera://flags 并开启 ServiceWorker 的支持; 重启浏览器。 </li>
</ul>
<p>另外，你需要通过 <strong>HTTPS</strong> 来访问你的页面 — 出于安全原因，Service Workers 要求要在必须在 HTTPS 下才能运行。Github 是个用来测试的好地方，因为它就支持HTTPS。为了便于本地开发，localhost 也被浏览器认为是安全源。</p>
</blockquote>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h3 id="注册service-worker"><a href="#注册service-worker" class="headerlink" title="注册service worker"></a>注册service worker</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * @scriptURL ServiceWorker脚本资源路径(可以是绝对或者相对当前URL的路径)</div><div class="line"> * @options &#123;scope: './'&#125; scope是一个路径,默认值就是'./',它总是相对于ServiceWorker脚本资源路径的,scope指定了一个ServiceWorker的生效范围,只有在这个路径范围内的资源才能支持离线访问(所以跨域的资源是没法离线访问的)</div><div class="line"> */</div><div class="line">ServiceWorkerContainer.register(scriptURL, options)</div><div class="line">    .then(</div><div class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">ServiceWorkerRegistration</span>) </span>&#123;</div><div class="line">            <span class="comment">// do something</span></div><div class="line">        &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<p>代码如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//兼容性判断</span></div><div class="line"><span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;</div><div class="line">    navigator.serviceWorker.register(<span class="string">'sw.js'</span>, &#123;<span class="attr">scope</span>: <span class="string">'./'</span>&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">reg</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (reg.installing) &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'Service worker installing'</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (reg.waiting) &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'Service worker installed'</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (reg.active) &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'Service worker active'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</div><div class="line">        <span class="comment">// registration failed</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Registration failed with '</span> + error);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>事实上当浏览器运行上面的代码时, 会先检测是否之前就获取并注册过<strong>sw.js</strong></p>
<ul>
<li>如果是<strong>首次运行</strong>,那就先下载并保存在本地, chrome中可以在<em>Application -&gt; Service Workers</em>面板中查看<br><img src="https://lh2907883.github.io/store/blog/web%E7%A6%BB%E7%BA%BF%E5%BA%94%E7%94%A8/3.png" alt=""><br>这时会触发Service Worker的<code>install</code>事件,之后会进入<code>navigator.serviceWorker.register</code>返回的<code>Promise.then</code>,状态<code>state</code>为<code>installing</code>. </li>
<li>如果发现本地已经有<strong>sw.js</strong> <em>(即使本地的<strong>sw.js</strong>不是最新代码,这次访问任然会使用本地<strong>sw.js</strong>的代码)</em>,那么会直接进入<code>navigator.serviceWorker.register</code>返回的<code>Promise.then</code>,状态<code>state</code>为<code>activated</code>,这时Service Worker为已激活状态,后面只要是有<code>scope</code>范围内的请求都会被Service Worker的<code>fetch</code>事件拦截<em>(注意:如果在scope下的html页面访问了跨域的资源,比如图片什么的,那这个跨域资源请求也会被拦截)</em>,在<code>fetch</code>的回调函数里面你可以自行控制是<strong>读缓存</strong>,还是<strong>请求网络</strong>,你甚至可以<strong>伪造响应数据</strong> <em>(我想这也是为什么Service Worker只支持HTTPS的原因)</em></li>
<li>如果发现本地已经有<strong>sw.js</strong>并且本地的<strong>sw.js</strong>不是最新代码,那么<strong>sw.js</strong>会自动更新,并触发Service Worker的<code>install</code>事件,在下次访问页面时将使用新版本的<strong>sw.js</strong>.</li>
</ul>
<h3 id="关于sw-js"><a href="#关于sw-js" class="headerlink" title="关于sw.js"></a>关于sw.js</h3><h4 id="sw-js的职责"><a href="#sw-js的职责" class="headerlink" title="sw.js的职责"></a>sw.js的职责</h4><p>从上面的描述,我们可以看出<strong>sw.js</strong>的职责其实是控制web应用中资源的访问策略,他和具体的业务逻辑,UI操作都没有任何关系,官方说明:</p>
<blockquote>
<p>如果注册成功，service worker 就在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ServiceWorkerGlobalScope" target="_blank" rel="external">ServiceWorkerGlobalScope</a> 环境中运行； 这是一个特殊类型的 woker 上下文运行环境，与主运行线程（执行脚本）相独立，同时也没有访问 DOM 的能力。</p>
</blockquote>
<h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><ul>
<li>注册install事件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.addEventListener(<span class="string">'install'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="comment">//console.log('sw.js install');</span></div><div class="line">    event.waitUntil(</div><div class="line">        caches.open(<span class="string">'v1'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">cache</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> cache.addAll([</div><div class="line">                <span class="string">'/demo/service-workers/'</span>,</div><div class="line">                <span class="string">'/demo/service-workers/index.html'</span>,</div><div class="line">                <span class="string">'/demo/service-workers/js/main.js'</span>,</div><div class="line">                <span class="string">'/demo/service-workers/json/data.json'</span>,</div><div class="line">                <span class="string">'/demo/service-workers/images/1.jpg'</span>,</div><div class="line">                <span class="string">'/demo/service-workers/images/2.jpg'</span>,</div><div class="line">            ]);</div><div class="line">        &#125;)</div><div class="line">    );</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>install 事件一般是被用来填充你的浏览器的离线缓存能力。为了达成这个目的，我们使用了 Service Worker 的 新的标志性的存储 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Cache" target="_blank" rel="external">API — cache</a> — 一个 service worker 上的全局对象，它使我们可以存储网络响应发来的资源，并且根据它们的请求来生成key。这个 API 和浏览器的标准的缓存工作原理很相似，但是是特定你的域的。它会一直持久存在，直到你告诉它不再存储，你拥有全部的控制权。<br>注意:  Cache API  并不被每个浏览器支持。（查看 Browser support  部分了解更多信息。） 如果你现在就想使用它，可以考虑采用一个 polyfill，比如 <a href="https://github.com/Polymer/topeka/blob/master/sw.js" target="_blank" rel="external">Google topeka demo</a>，或者把你的资源存储在 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/IndexedDB" target="_blank" rel="external">IndexedDB</a> 中。</p>
</blockquote>
<p>缓存方案有很多种, 示例代码中采用<code>Cache</code>, 值得注意的是<code>cache.addAll</code>可不仅仅只是记录需要缓存的资源URL列表, 它同时还会<code>fetch</code>这些资源把响应数据缓存起来,以便后面访问的时候使用 <em>(如果是一个复杂的web应用,个人觉得有些不太合理,谁又会在页面刚刚进来时就加载所有资源呢?)</em></p>
<ul>
<li>注册fetch事件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.addEventListener(<span class="string">'fetch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="comment">//console.log(event.request);</span></div><div class="line">    <span class="comment">//console.log(caches);</span></div><div class="line">    event.respondWith(</div><div class="line">        caches.match(event.request)</div><div class="line">        .catch(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> fetch(event.request);</div><div class="line">        &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">            <span class="comment">//console.log(response);</span></div><div class="line">            caches.open(<span class="string">'v1'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">cache</span>) </span>&#123;</div><div class="line">                <span class="comment">//console.log(cache);</span></div><div class="line">                cache.put(event.request, response);</div><div class="line">            &#125;);</div><div class="line">            <span class="keyword">return</span> response.clone();</div><div class="line">        &#125;)</div><div class="line">    );</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li><code>event.respondWith</code>接受一个返回response响应的Promise</li>
<li><code>caches.match</code>会尝试在缓存中匹配当前fetch的请求,匹配到了就直接返回response</li>
<li><code>cache.put</code>则是更新缓存</li>
</ol>
<ul>
<li>注册activate事件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.addEventListener(<span class="string">'activate'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> cacheWhitelist = [<span class="string">'v2'</span>];</div><div class="line"></div><div class="line">    event.waitUntil(</div><div class="line">        caches.keys().then(<span class="function"><span class="keyword">function</span>(<span class="params">keyList</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="built_in">Promise</span>.all(keyList.map(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (cacheWhitelist.indexOf(key) === <span class="number">-1</span>) &#123;</div><div class="line">                    <span class="keyword">return</span> caches.delete(key);</div><div class="line">                &#125;</div><div class="line">            &#125;));</div><div class="line">        &#125;)</div><div class="line">    );</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>activate事件回调一般被用来删除旧的缓存</p>
<h4 id="改进后的代码"><a href="#改进后的代码" class="headerlink" title="改进后的代码"></a>改进后的代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.addEventListener(<span class="string">'install'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'sw.js install'</span>);</div><div class="line">    event.waitUntil(</div><div class="line">        <span class="comment">//这里先不往缓存中写</span></div><div class="line">        caches.open(<span class="string">'v1'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">cache</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> cache.addAll([</div><div class="line">                <span class="comment">// '/demo/service-workers/',</span></div><div class="line">                <span class="comment">// '/demo/service-workers/index.html',</span></div><div class="line">                <span class="comment">// '/demo/service-workers/js/main.js',</span></div><div class="line">                <span class="comment">// '/demo/service-workers/json/data.json',</span></div><div class="line">                <span class="comment">// '/demo/service-workers/images/1.jpg',</span></div><div class="line">                <span class="comment">// '/demo/service-workers/images/2.jpg',</span></div><div class="line">                <span class="comment">// '/demo/service-workers/child.html',</span></div><div class="line">            ]);</div><div class="line">        &#125;)</div><div class="line">    );</div><div class="line">&#125;);</div><div class="line"><span class="keyword">this</span>.addEventListener(<span class="string">'fetch'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    event.respondWith(</div><div class="line">        caches.match(event.request)</div><div class="line">        .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (response) &#123;</div><div class="line">                <span class="comment">//如果匹配到了</span></div><div class="line">                <span class="keyword">return</span> response;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//如果有资源没有匹配(比如child.html里面的跨域图片),就先发请求访问,然后缓存一份</span></div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'url not match;'</span> + event.request.url);</div><div class="line">                <span class="keyword">return</span> fetch(event.request).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">                    <span class="built_in">console</span>.log(response);</div><div class="line">                    caches.open(<span class="string">'v1'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">cache</span>) </span>&#123;</div><div class="line">                        cache.put(event.request, response);</div><div class="line">                    &#125;);</div><div class="line">                    <span class="keyword">return</span> response.clone();</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .catch(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> fetch(event.request);</div><div class="line">        &#125;)</div><div class="line">    );</div><div class="line">&#125;);</div><div class="line"><span class="keyword">this</span>.addEventListener(<span class="string">'activate'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'activate'</span>)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><a href="https://lh2907883.github.io/store/demo/service-workers/">演示地址</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API/Using_Service_Workers" target="_blank" rel="external">MDN 使用 Service Workers</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是web离线应用&quot;&gt;&lt;a href=&quot;#什么是web离线应用&quot; class=&quot;headerlink&quot; title=&quot;什么是web离线应用&quot;&gt;&lt;/a&gt;什么是web离线应用&lt;/h2&gt;&lt;p&gt;在正常情况下,客户端使用HTTP协议通过网络得到服务器的资源,然后展示,但是
    
    </summary>
    
    
      <category term="javascript" scheme="http://lh2907883.github.io/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>关于XMLHttpRequest</title>
    <link href="http://lh2907883.github.io/blog/2017/05/07/%E5%85%B3%E4%BA%8EXMLHttpRequest/"/>
    <id>http://lh2907883.github.io/blog/2017/05/07/关于XMLHttpRequest/</id>
    <published>2017-05-07T04:37:45.000Z</published>
    <updated>2017-05-07T15:34:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="XMLHttpRequest是什么"><a href="#XMLHttpRequest是什么" class="headerlink" title="XMLHttpRequest是什么"></a>XMLHttpRequest是什么</h2><p>XMLHttpRequest 是一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="external">API</a>, 它为客户端提供了在客户端和服务器之间传输数据的功能。它提供了一个通过 URL 来获取数据的简单方式，并且不会使整个页面刷新。这使得网页只更新一部分页面而不会打扰到用户。XMLHttpRequest 在 <a href="https://developer.mozilla.org/zh-CN/docs/AJAX" target="_blank" rel="external">AJAX</a> 中被大量使用。</p>
<h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p><img src="https://lh2907883.github.io/store/blog/%E5%85%B3%E4%BA%8EXMLHttpRequest/1.png" alt=""></p>
<ul>
<li><p>IE8/IE9也完全不支持xhr对象, 不过可以使用<a href="https://msdn.microsoft.com/zh-cn/library/7sw4ddf8%28v=vs.94%29.aspx" target="_blank" rel="external">ActiveXObject</a>类生成xhr实例</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="built_in">window</span>.ActiveXObject( <span class="string">"Microsoft.XMLHTTP"</span> )</div></pre></td></tr></table></figure>
</li>
<li><p>IE10/IE11部分支持，不支持 xhr.responseType为json</p>
</li>
</ul>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>使用xhr给后台server发送请求,大概可以分下面几个步骤</p>
<h3 id="1-实例化XMLHttpRequest对象"><a href="#1-实例化XMLHttpRequest对象" class="headerlink" title="1.实例化XMLHttpRequest对象"></a>1.实例化XMLHttpRequest对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div></pre></td></tr></table></figure>
<h3 id="2-初始化一个请求"><a href="#2-初始化一个请求" class="headerlink" title="2.初始化一个请求"></a>2.初始化一个请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xhr.open(<span class="string">'POST'</span>, <span class="string">'/server'</span>, <span class="literal">true</span>);</div></pre></td></tr></table></figure>
<p><code>open(method, url [, async = true [, username = null [, password = null]]])</code></p>
<p>async: 默认值为true，即为异步请求，若async=false，则为同步请求</p>
<h3 id="3-设置xhr参数"><a href="#3-设置xhr参数" class="headerlink" title="3.设置xhr参数"></a>3.设置xhr参数</h3><h4 id="3-1-设置request-header"><a href="#3-1-设置request-header" class="headerlink" title="3.1 设置request header"></a>3.1 设置request header</h4><ol>
<li>通过调用setRequestHeader方法,设置请求头,这一步必须在<code>xhr.open</code>之后调用</li>
<li>setRequestHeader可以调用多次，最终的值不会采用覆盖override的方式，而是采用追加append的方式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xhr.setRequestHeader(<span class="string">'X-Test'</span>, <span class="string">'one'</span>);</div><div class="line">xhr.setRequestHeader(<span class="string">'X-Test'</span>, <span class="string">'two'</span>);</div><div class="line"><span class="comment">// 最终request header中"X-Test"为: one, two</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="3-2-设置response-type"><a href="#3-2-设置response-type" class="headerlink" title="3.2 设置response type"></a>3.2 设置response type</h4><ol>
<li>可以设置<code>xhr.responseType</code>,下面是responseType支持的类型</li>
</ol>
<table>
<thead>
<tr>
<th>值</th>
<th>xhr.response 数据类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>“”</td>
<td>String</td>
<td>默认值(在不设置responseType时)</td>
</tr>
<tr>
<td>“text”</td>
<td>String</td>
<td></td>
</tr>
<tr>
<td>“document”</td>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document" target="_blank" rel="external">Document</a> 对象</td>
<td>希望返回 XML 格式数据时使用</td>
</tr>
<tr>
<td>“json”</td>
<td>javascript 对象</td>
<td>存在兼容性问题，IE10/IE11不支持</td>
</tr>
<tr>
<td>“blob”</td>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob" target="_blank" rel="external">Blob</a>对象</td>
<td></td>
</tr>
<tr>
<td>“arrayBuffer”</td>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ArrayBuffer" target="_blank" rel="external">ArrayBuffer</a>对象</td>
</tr>
</tbody>
</table>
<p>客户端代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'/json'</span>);</div><div class="line">xhr.responseType = <span class="string">'json'</span>;</div><div class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.readyState == <span class="number">4</span> &amp;&amp; <span class="keyword">this</span>.status == <span class="number">200</span>) &#123;</div><div class="line">        <span class="comment">//通过xhr.response可以拿到返回的json数据</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.response);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">xhr.send();</div></pre></td></tr></table></figure></p>
<p>服务端代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (req.url == <span class="string">'/json'</span>) &#123;</div><div class="line">    res.writeHead(<span class="number">200</span>, &#123; <span class="string">'content-type'</span>: <span class="string">'application/json'</span> &#125;);</div><div class="line">    res.write(<span class="string">'&#123;"a": 123, "b": "dcs"&#125;'</span>);</div><div class="line">    res.end();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ol>
<li>通过调用<code>xhr.overrideMimeType</code>方法来重写response的content-type(不过这个方法我调用之后并没有起作用..)</li>
</ol>
<h4 id="3-3-设置请求超时"><a href="#3-3-设置请求超时" class="headerlink" title="3.3 设置请求超时"></a>3.3 设置请求超时</h4><p>可以设置<code>xhr.timeout</code>,来设置超时时间(单位毫秒),在xhr.send()方法调用后开始计时</p>
<h4 id="3-4-设置xhr状态变化时的回调"><a href="#3-4-设置xhr状态变化时的回调" class="headerlink" title="3.4 设置xhr状态变化时的回调"></a>3.4 设置xhr状态变化时的回调</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">switch</span>(xhr.readyState)&#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">0</span>:<span class="comment">//UNSENT,open()方法没有调用</span></div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//OPENED,open()方法已被成功调用,send()方法还未被调用。</span></div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//HEADERS_RECEIVED,send()方法已经被调用, 响应头和响应状态已经返回</span></div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//LOADING,响应体下载中,responseText中已经获取了部分数据.</span></div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">4</span>:<span class="comment">//DONE,整个请求过程已经完毕.</span></div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-5-xhr的事件"><a href="#3-5-xhr的事件" class="headerlink" title="3.5 xhr的事件"></a>3.5 xhr的事件</h4><table>
<thead>
<tr>
<th>事件</th>
<th>触发条件</th>
</tr>
</thead>
<tbody>
<tr>
<td>onreadystatechange</td>
<td>每当xhr.readyState改变时触发；但xhr.readyState由非0值变为0时不触发。</td>
</tr>
<tr>
<td>onloadstart</td>
<td>调用xhr.send()方法后立即触发，若xhr.send()未被调用则不会触发此事件。</td>
</tr>
<tr>
<td>onprogress</td>
<td>xhr.upload.onprogress在上传阶段(即xhr.send()之后，xhr.readystate=2之前)触发；xhr.onprogress在下载阶段（即xhr.readystate=3时）触发</td>
</tr>
<tr>
<td>onload</td>
<td>当请求成功完成时触发，此时xhr.readystate=4</td>
</tr>
<tr>
<td>onloadend</td>
<td>当请求结束（包括请求成功和请求失败）时触发</td>
</tr>
<tr>
<td>onabort</td>
<td>当调用xhr.abort()后触发</td>
</tr>
<tr>
<td>ontimeout</td>
<td>xhr.timeout不等于0，由请求开始即onloadstart开始算起，当到达xhr.timeout所设置时间请求还未结束即onloadend，则触发此事件。</td>
</tr>
<tr>
<td>onerror</td>
<td>在请求过程中，若发生Network error则会触发此事件（若发生Network error时，上传还没有结束，则会先触发xhr.upload.onerror，再触发xhr.onerror；若发生Network error时，上传已经结束，则只会触发xhr.onerror）。<strong>注意</strong>，只有发生了网络层级别的异常才会触发此事件，对于应用层级别的异常，如响应返回的xhr.statusCode是4xx时，并不属于Network error，所以不会触发onerror事件，而是会触发onload事件。</td>
</tr>
</tbody>
</table>
<h3 id="4-发送数据"><a href="#4-发送数据" class="headerlink" title="4.发送数据"></a>4.发送数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xhr.send(data);</div></pre></td></tr></table></figure>
<ul>
<li>对于GET/HEAD请求<code>send</code>方法通常不传参数</li>
<li>对于POST/DELETE/PUT请求,<code>xhr.send(data)</code>的参数data可以是以下几种类型：<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ArrayBuffer" target="_blank" rel="external">ArrayBuffer</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob" target="_blank" rel="external">Blob</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document" target="_blank" rel="external">Document</a></li>
<li>DOMString</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FormData" target="_blank" rel="external">FormData</a></li>
</ul>
</li>
</ul>
<p>来一个🌰</p>
<p>客户端代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fileInputElement = <span class="built_in">document</span>.getElementById(<span class="string">'file'</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> oMyForm = <span class="keyword">new</span> FormData();</div><div class="line"></div><div class="line">oMyForm.append(<span class="string">"username"</span>, <span class="string">"dcs"</span>);</div><div class="line">oMyForm.append(<span class="string">"num"</span>, <span class="number">123456</span>); <span class="comment">// 数字123456被立即转换成字符串"123456"</span></div><div class="line"></div><div class="line"><span class="comment">// fileInputElement中已经包含了用户所选择的文件</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; fileInputElement.files.length; i++) &#123;</div><div class="line">    oMyForm.append(<span class="string">"file"</span>, fileInputElement.files[i]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> oFileBody = <span class="string">'&lt;a id="a"&gt;&lt;b id="b"&gt;hey!&lt;/b&gt;&lt;/a&gt;'</span>; <span class="comment">// Blob对象包含的文件内容</span></div><div class="line"><span class="keyword">var</span> oBlob = <span class="keyword">new</span> Blob([oFileBody], &#123;</div><div class="line">    <span class="attr">type</span>: <span class="string">"text/xml"</span></div><div class="line">&#125;);</div><div class="line">oMyForm.append(<span class="string">"blob"</span>, oBlob);</div><div class="line"></div><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">xhr.upload.onprogress = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (event.lengthComputable) &#123;</div><div class="line">        <span class="keyword">var</span> completedPercent = event.loaded / event.total;</div><div class="line">        <span class="built_in">console</span>.log(completedPercent);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">xhr.open(<span class="string">"POST"</span>, <span class="string">"/upload"</span>);</div><div class="line">xhr.send(oMyForm);</div></pre></td></tr></table></figure></p>
<p>服务端代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (req.url == <span class="string">'/upload'</span> &amp;&amp; req.method.toLowerCase() == <span class="string">'post'</span>) &#123;</div><div class="line">    req.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">buffer</span>) </span>&#123;</div><div class="line">        <span class="comment">//会不时的触发data事件来接受客户端传递的数据</span></div><div class="line">    &#125;)</div><div class="line">    .on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">//数据传递完毕</span></div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>注意</strong>: 客户端的<code>xhr.upload.onprogress</code>表示的是上传进度触发的回调(进度取决于客户端的网络状况),参数<code>event.total</code>针对的是所有file的总大小, 而服务端的<code>req.on(&#39;data&#39;, function(){})</code>只是这次请求的数据流接受一定量的数据后触发的回调,两者之间没有直接关系</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://segmentfault.com/a/1190000004322487" target="_blank" rel="external">你真的会使用XMLHttpRequest吗？</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="external">MDN XMLHttpRequest</a></li>
<li><a href="https://www.html5rocks.com/zh/tutorials/file/xhr2/" target="_blank" rel="external">XMLHttpRequest2 新技巧</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;XMLHttpRequest是什么&quot;&gt;&lt;a href=&quot;#XMLHttpRequest是什么&quot; class=&quot;headerlink&quot; title=&quot;XMLHttpRequest是什么&quot;&gt;&lt;/a&gt;XMLHttpRequest是什么&lt;/h2&gt;&lt;p&gt;XMLHttpReq
    
    </summary>
    
    
      <category term="javascript" scheme="http://lh2907883.github.io/blog/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://lh2907883.github.io/blog/2017/05/06/hello-world/"/>
    <id>http://lh2907883.github.io/blog/2017/05/06/hello-world/</id>
    <published>2017-05-06T08:43:45.000Z</published>
    <updated>2017-05-13T08:19:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
