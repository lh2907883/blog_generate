{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/logo.jpg","path":"images/logo.jpg","modified":0,"renderable":0},{"_id":"themes/jacman/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.eot","path":"font/fontdiao.eot","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/author.jpg","path":"img/author.jpg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","path":"img/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","path":"img/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc.svg","path":"img/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.ttf","path":"font/fontdiao.ttf","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.woff","path":"font/fontdiao.woff","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nd.svg","path":"img/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-sa.svg","path":"img/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-by.svg","path":"img/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/cc-zero.svg","path":"img/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/jacman.jpg","path":"img/jacman.jpg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/scrollup.png","path":"img/scrollup.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/gallery.js","path":"js/gallery.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","path":"js/jquery.qrcode-0.12.0.min.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.svg","path":"font/fontdiao.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/jacman/source/img/banner.jpg","path":"img/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"495dc0d217dbc3e7cb0c015a4aa9af3e7011d37f","modified":1494149618000},{"_id":"themes/jacman/.gitignore","hash":"7d65523f2a5afb69d76824dd1dfa62a34faa3197","modified":1494667734000},{"_id":"themes/jacman/LICENSE","hash":"931516aa36c53eb7843c83d82662eb50cc3c4367","modified":1494667734000},{"_id":"themes/jacman/README.md","hash":"75a5c9fbd7c9cec4d2f277042d2fee550e4936be","modified":1494667734000},{"_id":"themes/jacman/README_zh.md","hash":"d6014b16eaccc97dc54a7779c9e36003752410e1","modified":1494667734000},{"_id":"themes/jacman/_config.yml","hash":"2ccb4ccec846f3c2629142ffad1736018754a6b4","modified":1494669547000},{"_id":"source/_drafts/fetch.md","hash":"3b351b7ad2539fa595a2b64f3b9887ba4634d389","modified":1494666625000},{"_id":"source/_drafts/web离线应用.md","hash":"7b07e82297a34b5c97ad2c16e54344a72bed4c7e","modified":1494683728000},{"_id":"source/_drafts/雪碧图生成.md","hash":"f5de27b23abb83f36641d486965221910657a65f","modified":1494666671000},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1494663571000},{"_id":"source/_posts/关于XMLHttpRequest.md","hash":"c89d8455efadf9b8346d670aa7854f295244b7df","modified":1494171286000},{"_id":"source/images/logo.jpg","hash":"63cfaf908e5a4a512a47ff6c7067c5db9f9c37dc","modified":1494170737000},{"_id":"themes/jacman/languages/default.yml","hash":"eea72d6138497287c0b3f4bd93e4f6f62b7aff37","modified":1494667734000},{"_id":"themes/jacman/languages/zh-CN.yml","hash":"1f3b9d00dd4322352b0c9c82a76dc9865a616d41","modified":1494667734000},{"_id":"themes/jacman/languages/zh-TW.yml","hash":"61a02ba818d641579a86fcd7f5926ab1e6ab5f70","modified":1494667734000},{"_id":"themes/jacman/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1494667734000},{"_id":"themes/jacman/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1494667734000},{"_id":"themes/jacman/layout/index.ejs","hash":"75cef2172c286994af412e11ab7f4f5a0daaf1f5","modified":1494667734000},{"_id":"themes/jacman/layout/layout.ejs","hash":"5b4289a4526899809b9c2facea535367ff51ba2b","modified":1494667734000},{"_id":"themes/jacman/layout/page.ejs","hash":"bd6bbf2ea8e183bd835867ff617dc6366b56748c","modified":1494667734000},{"_id":"themes/jacman/layout/post.ejs","hash":"3114134775bdde5a83cf14feb019606fa2b2b2be","modified":1494667734000},{"_id":"themes/jacman/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1494667734000},{"_id":"themes/jacman/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1494667734000},{"_id":"themes/jacman/layout/_partial/after_footer.ejs","hash":"c703b0c25139b8a5f8f9d24a334a07905e2b7987","modified":1494667734000},{"_id":"themes/jacman/layout/_partial/archive.ejs","hash":"2c7395e7563fe016521712a645c28a13f952d52a","modified":1494667734000},{"_id":"themes/jacman/layout/_partial/article.ejs","hash":"261ecacb8456f4cb972632b6a9103860fa63b9a3","modified":1494667734000},{"_id":"themes/jacman/layout/_partial/analytics.ejs","hash":"697601996220fe0a0f9cd628be67dec3c86ae2aa","modified":1494667734000},{"_id":"themes/jacman/layout/_partial/article_row.ejs","hash":"4cb855d91ece7f67b2ca0992fffa55472d0b9c93","modified":1494667734000},{"_id":"themes/jacman/layout/_partial/categories.ejs","hash":"8a52d0344d5bce1925cf586ed73c11192925209b","modified":1494667734000},{"_id":"themes/jacman/layout/_partial/footer.ejs","hash":"5f80bf6c6ddcf8c28c4599cd1540b14b25d54f18","modified":1494667734000},{"_id":"themes/jacman/layout/_partial/head.ejs","hash":"761941be4922cd3c177c8130296b909bf7db5c09","modified":1494667734000},{"_id":"themes/jacman/layout/_partial/header.ejs","hash":"18515612344ff048b9372b91b7eef6f3b143801f","modified":1494667734000},{"_id":"themes/jacman/layout/_partial/mathjax.ejs","hash":"d42994ac696f52ba99c1cbac382cd76d5b04a3e8","modified":1494667734000},{"_id":"themes/jacman/layout/_partial/pagination.ejs","hash":"6146ac37dfb4f8613090bc52b3fc8cfa911a186a","modified":1494667734000},{"_id":"themes/jacman/layout/_partial/search.ejs","hash":"1083824a6c6c3df02767f2f3b727aee78ebb76ec","modified":1494667734000},{"_id":"themes/jacman/layout/_partial/sidebar.ejs","hash":"c4f527fff0070fbe65919053a16224412317f40d","modified":1494667734000},{"_id":"themes/jacman/layout/_partial/tags.ejs","hash":"b33b2b5d08f1d53a8de25a95f660f7f1cea7b3cb","modified":1494667734000},{"_id":"themes/jacman/layout/_partial/tinysou_search.ejs","hash":"06ecddc8a9d40b480fe2e958af1dab857a9d5441","modified":1494667734000},{"_id":"themes/jacman/layout/_partial/totop.ejs","hash":"bea5bb7cb9350b8af7d97a8d223af63a5b30ab78","modified":1494667734000},{"_id":"themes/jacman/layout/_widget/archive.ejs","hash":"39ea6b7888406fbd1b4cf236ebd718e881493374","modified":1494667734000},{"_id":"themes/jacman/layout/_widget/category.ejs","hash":"c1fae96b5053da021bcc04ab2ce5c2c8d30de8a2","modified":1494667734000},{"_id":"themes/jacman/layout/_widget/douban.ejs","hash":"e3820c36169e88663e6c9177666b2904c1ce47e6","modified":1494667734000},{"_id":"themes/jacman/layout/_widget/github-card.ejs","hash":"5c759b6ea214bac56a393247de27e67ce73fb33f","modified":1494667734000},{"_id":"themes/jacman/layout/_widget/links.ejs","hash":"e49868063439c2092cdf9a8ec82cc295b0e42f66","modified":1494667734000},{"_id":"themes/jacman/layout/_widget/rss.ejs","hash":"0a4b5f2a2e36a1d504fe2e7c6c8372cbb4628aab","modified":1494667734000},{"_id":"themes/jacman/layout/_widget/tag.ejs","hash":"7e82ad9c916b9ce871b2f65ce8f283c5ba47947b","modified":1494667734000},{"_id":"themes/jacman/layout/_widget/tagcloud.ejs","hash":"10a1001189d5c28ce6d42494563b9637c302b454","modified":1494667734000},{"_id":"themes/jacman/layout/_widget/weibo.ejs","hash":"a31c2b223d0feb2a227e203cac9e5d13b7d328a8","modified":1494667734000},{"_id":"themes/jacman/source/css/style.styl","hash":"a0a45af186a72ae68979bf26f2a5d0d2303189ca","modified":1494667734000},{"_id":"themes/jacman/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1494667734000},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1494667734000},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1494667734000},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1494667734000},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1494667734000},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1494667734000},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1494667734000},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1494667734000},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1494667734000},{"_id":"themes/jacman/source/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1494667734000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1494667734000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1494667734000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1494667734000},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1494667734000},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1494667734000},{"_id":"themes/jacman/source/font/fontdiao.eot","hash":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1494667734000},{"_id":"themes/jacman/source/img/author.jpg","hash":"2a292e681b4c6c975eec9c8c356d99647a465542","modified":1494667734000},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1494667734000},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1494667734000},{"_id":"themes/jacman/source/img/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1494667734000},{"_id":"themes/jacman/source/font/fontdiao.ttf","hash":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1494667734000},{"_id":"themes/jacman/source/font/fontdiao.woff","hash":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1494667734000},{"_id":"themes/jacman/source/img/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1494667734000},{"_id":"themes/jacman/source/img/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1494667734000},{"_id":"themes/jacman/source/img/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1494667734000},{"_id":"themes/jacman/source/img/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1494667734000},{"_id":"themes/jacman/source/img/favicon.ico","hash":"2d22a3e0c7905a894e832c831dd91c29c209c7a5","modified":1494667734000},{"_id":"themes/jacman/source/img/jacman.jpg","hash":"0ba14a4a5e3be012826fc713c33479912126d34e","modified":1494667734000},{"_id":"themes/jacman/source/img/logo.svg","hash":"9ae38f7225c38624faeb7b74996efa9de7bf065b","modified":1494667734000},{"_id":"themes/jacman/source/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1494667734000},{"_id":"themes/jacman/source/js/gallery.js","hash":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1494667734000},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1494667734000},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","hash":"57c3987166a26415a71292162690e82c21e315ad","modified":1494667734000},{"_id":"themes/jacman/source/js/totop.js","hash":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb","modified":1494667734000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","hash":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53","modified":1494667734000},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1494667734000},{"_id":"themes/jacman/source/font/fontdiao.svg","hash":"334a94e6a66a8b089be7315d876bec93efe38d2b","modified":1494667734000},{"_id":"themes/jacman/source/img/logo.png","hash":"fd08d12d1fa147cf894e8f8327e38f1758de32ed","modified":1494667734000},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","hash":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d","modified":1494667734000},{"_id":"themes/jacman/layout/_partial/post/article.ejs","hash":"b09e3acea7076e1f01dfe0c2295e19951ea09437","modified":1494667734000},{"_id":"themes/jacman/layout/_partial/post/comment.ejs","hash":"c88bc8f5805173920a5fdd7e9234a850e3d8e151","modified":1494667734000},{"_id":"themes/jacman/layout/_partial/post/catetags.ejs","hash":"0e37bababc8f4659f5b59a552a946b46d89e4158","modified":1494667734000},{"_id":"themes/jacman/layout/_partial/post/footer.ejs","hash":"b12ec08a5845a3d8c01257614f1dfead879c87d2","modified":1494667734000},{"_id":"themes/jacman/layout/_partial/post/gallery.ejs","hash":"fafc2501d7e65983b0f5c2b58151ca12e57c0574","modified":1494667734000},{"_id":"themes/jacman/layout/_partial/post/header.ejs","hash":"36a705942b691abe0d643ea8afa339981b32f6f2","modified":1494667734000},{"_id":"themes/jacman/layout/_partial/post/jiathis.ejs","hash":"d7f5960039ac74924559ab6ba03c64457b8f0966","modified":1494667734000},{"_id":"themes/jacman/layout/_partial/post/pagination.ejs","hash":"7de9c07a4c968429a8088c31a28b7f3a993ded1b","modified":1494667734000},{"_id":"themes/jacman/source/css/_base/font.styl","hash":"c8a0faf43b08e37ad07a5669db76d595da966159","modified":1494667734000},{"_id":"themes/jacman/source/css/_base/public.styl","hash":"f016180726019927b9a835ed01e04d153f27a149","modified":1494667734000},{"_id":"themes/jacman/source/css/_base/variable.styl","hash":"cb652eb83c28a208743fabab92de896f8b7cbf7b","modified":1494667734000},{"_id":"themes/jacman/source/css/_partial/article.styl","hash":"c69641b4a34a8c62986b335414413dbde26de25e","modified":1494667734000},{"_id":"themes/jacman/source/css/_partial/aside.styl","hash":"506fde1d67ce750452cbe84bee01a19c7d027c5e","modified":1494667734000},{"_id":"themes/jacman/source/css/_partial/duoshuo.styl","hash":"e85f1192283f043115c272a9deb3cb6ced793990","modified":1494667734000},{"_id":"themes/jacman/source/css/_partial/footer.styl","hash":"1911613a19b605a58f801c21b03b5d4c83b90f9c","modified":1494667734000},{"_id":"themes/jacman/source/css/_partial/gallery.styl","hash":"7246809f4ce3166ec1b259bf475cae1a48e29aad","modified":1494667734000},{"_id":"themes/jacman/source/css/_partial/header.styl","hash":"5121ceb712be3f2dde98b8b6e589b546e19eab8f","modified":1494667734000},{"_id":"themes/jacman/source/css/_partial/helper.styl","hash":"1136600932b97534b88465bf05ef313630b2de3d","modified":1494667734000},{"_id":"themes/jacman/source/css/_partial/index.styl","hash":"a72ff14effd276015264f870f47ed8f8413bf5d3","modified":1494667734000},{"_id":"themes/jacman/source/css/_partial/totop.styl","hash":"96363d7c5aaed5f649667fc0752a62620a67e872","modified":1494667734000},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1494667734000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1494667734000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1494667734000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1494667734000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1494667734000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1494667734000},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1494667734000},{"_id":"themes/jacman/source/img/banner.jpg","hash":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1494667734000},{"_id":"themes/jacman/source/css/_base/highlight/highlight.styl","hash":"91b62bfc58390b0d5db782a75be6965ee3665eb3","modified":1494667734000},{"_id":"themes/jacman/source/css/_base/highlight/theme.styl","hash":"e3a59bd427ba37a54ead9eeba9a5356b3f720a48","modified":1494667734000},{"_id":"public/search.xml","hash":"af1d37fe20d626df8c15a6b520dd71d9e44ef561","modified":1494669712560},{"_id":"public/content.json","hash":"3189c773efeadbbabc6687fefd9a7425351c1c78","modified":1494669712649},{"_id":"public/atom.xml","hash":"23e64a26337ec710212a18b469fadeb946da0fc5","modified":1494669712650},{"_id":"public/sitemap.xml","hash":"48c7acc4d69376e1d1835efe596bc87f1c013228","modified":1494669712650},{"_id":"public/2017/05/06/hello-world/index.html","hash":"0b80d21f5292fa20f705f05b1c1f7fa21b8d8233","modified":1494669712666},{"_id":"public/archives/index.html","hash":"bba8383b6e1387792e28f528fbeef26205757a72","modified":1494669712686},{"_id":"public/archives/2017/index.html","hash":"0a1e4e377ae9055900f17b01693e1d3ed93ac203","modified":1494669712687},{"_id":"public/archives/2017/05/index.html","hash":"045a9150a01c802122b2859ebf52e3ca9e12d492","modified":1494669712687},{"_id":"public/tags/javascript/index.html","hash":"d6b6ac7ba7c8dc232b294a1a758d06310ad52d40","modified":1494669712687},{"_id":"public/2017/05/07/关于XMLHttpRequest/index.html","hash":"4f8d6024f22c3911b99e23362645c50e68a89b03","modified":1494669712687},{"_id":"public/index.html","hash":"c682ea67b957dc37f76777fc291a0133519d07eb","modified":1494669712687},{"_id":"public/2017/05/13/雪碧图生成/index.html","hash":"674d98a9a14aac53613a26814197fbce69b689db","modified":1494669712693},{"_id":"public/2017/05/13/web离线应用/index.html","hash":"5ecc1f97eafce80fe55d76d42743e9cc86f313db","modified":1494669712693},{"_id":"public/2017/05/13/fetch/index.html","hash":"f4aa6b87b6ee50c6650dedfcc4196bdb1a4e7fe8","modified":1494669712693},{"_id":"public/images/logo.jpg","hash":"63cfaf908e5a4a512a47ff6c7067c5db9f9c37dc","modified":1494669712701},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1494669712701},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1494669712702},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1494669712702},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1494669712703},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1494669712703},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1494669712703},{"_id":"public/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1494669712703},{"_id":"public/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1494669712703},{"_id":"public/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1494669712703},{"_id":"public/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1494669712704},{"_id":"public/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1494669712704},{"_id":"public/img/author.jpg","hash":"2a292e681b4c6c975eec9c8c356d99647a465542","modified":1494669712704},{"_id":"public/img/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1494669712704},{"_id":"public/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1494669712704},{"_id":"public/font/fontdiao.eot","hash":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1494669712704},{"_id":"public/img/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1494669712704},{"_id":"public/img/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1494669712704},{"_id":"public/font/fontdiao.woff","hash":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1494669712704},{"_id":"public/font/fontdiao.ttf","hash":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1494669712704},{"_id":"public/img/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1494669712704},{"_id":"public/img/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1494669712705},{"_id":"public/img/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1494669712705},{"_id":"public/img/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1494669712705},{"_id":"public/img/favicon.ico","hash":"2d22a3e0c7905a894e832c831dd91c29c209c7a5","modified":1494669712705},{"_id":"public/img/jacman.jpg","hash":"0ba14a4a5e3be012826fc713c33479912126d34e","modified":1494669712705},{"_id":"public/img/logo.svg","hash":"9ae38f7225c38624faeb7b74996efa9de7bf065b","modified":1494669712705},{"_id":"public/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1494669712705},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1494669712705},{"_id":"public/font/coveredbyyourgrace-webfont.svg","hash":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53","modified":1494669713344},{"_id":"public/img/logo.png","hash":"fd08d12d1fa147cf894e8f8327e38f1758de32ed","modified":1494669713350},{"_id":"public/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1494669713352},{"_id":"public/font/fontdiao.svg","hash":"334a94e6a66a8b089be7315d876bec93efe38d2b","modified":1494669713352},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1494669713356},{"_id":"public/js/gallery.js","hash":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1494669713356},{"_id":"public/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1494669713356},{"_id":"public/js/totop.js","hash":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb","modified":1494669713356},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1494669713356},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1494669713356},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1494669713356},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1494669713356},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1494669713356},{"_id":"public/css/style.css","hash":"01dacd94c4db9021e030bedc95f1a7ec402000f7","modified":1494669713356},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1494669713357},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1494669713357},{"_id":"public/js/jquery.qrcode-0.12.0.min.js","hash":"57c3987166a26415a71292162690e82c21e315ad","modified":1494669713357},{"_id":"public/js/jquery-2.0.3.min.js","hash":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d","modified":1494669713357},{"_id":"public/font/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1494669713358},{"_id":"public/img/banner.jpg","hash":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1494669713358},{"_id":"source/_posts/web离线应用.md","hash":"eb3813aab23547ebae3af148228f853abbe65a6f","modified":1494752549000}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"fetch","_content":"","source":"_drafts/fetch.md","raw":"---\ntitle: fetch\ntags:\n---\n","slug":"fetch","published":0,"date":"2017-05-13T09:10:25.000Z","updated":"2017-05-13T09:10:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2n3r716000010txaswmep2h","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"雪碧图生成","_content":"","source":"_drafts/雪碧图生成.md","raw":"---\ntitle: 雪碧图生成\ntags:\n---\n","slug":"雪碧图生成","published":0,"date":"2017-05-13T09:11:11.000Z","updated":"2017-05-13T09:11:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2n3r719000110txa742fi31","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-05-06T08:43:45.000Z","updated":"2017-05-13T08:19:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2n3r71d000310txcxwk7id4","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"关于XMLHttpRequest","date":"2017-05-07T04:37:45.000Z","_content":"## XMLHttpRequest是什么\nXMLHttpRequest 是一个[API](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest), 它为客户端提供了在客户端和服务器之间传输数据的功能。它提供了一个通过 URL 来获取数据的简单方式，并且不会使整个页面刷新。这使得网页只更新一部分页面而不会打扰到用户。XMLHttpRequest 在 [AJAX](https://developer.mozilla.org/zh-CN/docs/AJAX) 中被大量使用。\n\n## 兼容性\n![](https://lh2907883.github.io/store/blog/%E5%85%B3%E4%BA%8EXMLHttpRequest/1.png)\n* IE8/IE9也完全不支持xhr对象, 不过可以使用[ActiveXObject](https://msdn.microsoft.com/zh-cn/library/7sw4ddf8%28v=vs.94%29.aspx)类生成xhr实例\n```javascript\nnew window.ActiveXObject( \"Microsoft.XMLHTTP\" )\n```\n* IE10/IE11部分支持，不支持 xhr.responseType为json\n\n## 如何使用\n使用xhr给后台server发送请求,大概可以分下面几个步骤\n### 1.实例化XMLHttpRequest对象\n```javascript\nvar xhr = new XMLHttpRequest();\n```\n\n### 2.初始化一个请求\n```javascript\nxhr.open('POST', '/server', true);\n```\n``open(method, url [, async = true [, username = null [, password = null]]])``\n\nasync: 默认值为true，即为异步请求，若async=false，则为同步请求\n\n### 3.设置xhr参数\n#### 3.1 设置request header\n1. 通过调用setRequestHeader方法,设置请求头,这一步必须在``xhr.open``之后调用\n2. setRequestHeader可以调用多次，最终的值不会采用覆盖override的方式，而是采用追加append的方式\n```javascript\nxhr.setRequestHeader('X-Test', 'one');\nxhr.setRequestHeader('X-Test', 'two');\n// 最终request header中\"X-Test\"为: one, two\n```\n\n#### 3.2 设置response type\n1. 可以设置``xhr.responseType``,下面是responseType支持的类型\n\n| 值             | xhr.response 数据类型         |  说明                               |\n| ------        | -------                       |   ------                           |\n| \"\"            | String                        | 默认值(在不设置responseType时)        |\n| \"text\"        | String                        |                                    |\n| \"document\"    | [Document](https://developer.mozilla.org/zh-CN/docs/Web/API/Document) 对象                  | 希望返回 XML 格式数据时使用           |\n| \"json\"        | javascript 对象                | 存在兼容性问题，IE10/IE11不支持       |\n| \"blob\"        | [Blob](https://developer.mozilla.org/zh-CN/docs/Web/API/Blob)对象                       |                                    |\n| \"arrayBuffer\" | [ArrayBuffer](https://developer.mozilla.org/zh-CN/docs/Web/API/ArrayBuffer)对象                |                                    |\n客户端代码\n```javascript\nvar xhr = new XMLHttpRequest();\nxhr.open('GET', '/json');\nxhr.responseType = 'json';\nxhr.onreadystatechange = function(e) {\n    if (this.readyState == 4 && this.status == 200) {\n        //通过xhr.response可以拿到返回的json数据\n        console.log(this.response);\n    }\n};\nxhr.send();\n```\n服务端代码\n```javascript\nif (req.url == '/json') {\n    res.writeHead(200, { 'content-type': 'application/json' });\n    res.write('{\"a\": 123, \"b\": \"dcs\"}');\n    res.end();\n}\n```\n\n2. 通过调用``xhr.overrideMimeType``方法来重写response的content-type(不过这个方法我调用之后并没有起作用..)\n\n#### 3.3 设置请求超时\n可以设置``xhr.timeout``,来设置超时时间(单位毫秒),在xhr.send()方法调用后开始计时\n\n#### 3.4 设置xhr状态变化时的回调\n```javascript\nxhr.onreadystatechange = function () {\n    switch(xhr.readyState){\n        case 0://UNSENT,open()方法没有调用\n            break;\n        case 1://OPENED,open()方法已被成功调用,send()方法还未被调用。\n            break;\n        case 2://HEADERS_RECEIVED,send()方法已经被调用, 响应头和响应状态已经返回\n            break;\n        case 3://LOADING,响应体下载中,responseText中已经获取了部分数据.\n            break;\n        case 4://DONE,整个请求过程已经完毕.\n            break;\n    }\n}\n```\n#### 3.5 xhr的事件\n| 事件                | 触发条件                          |\n| -----              | -------                          |\n| onreadystatechange |\t每当xhr.readyState改变时触发；但xhr.readyState由非0值变为0时不触发。 |\n| onloadstart\t     |  调用xhr.send()方法后立即触发，若xhr.send()未被调用则不会触发此事件。   |\n| onprogress         |\txhr.upload.onprogress在上传阶段(即xhr.send()之后，xhr.readystate=2之前)触发；xhr.onprogress在下载阶段（即xhr.readystate=3时）触发  |\n| onload             |\t当请求成功完成时触发，此时xhr.readystate=4   |\n| onloadend\t         |  当请求结束（包括请求成功和请求失败）时触发   |\n| onabort            |\t当调用xhr.abort()后触发   |\n| ontimeout          |\txhr.timeout不等于0，由请求开始即onloadstart开始算起，当到达xhr.timeout所设置时间请求还未结束即onloadend，则触发此事件。   |\n| onerror            |\t在请求过程中，若发生Network error则会触发此事件（若发生Network error时，上传还没有结束，则会先触发xhr.upload.onerror，再触发xhr.onerror；若发生Network error时，上传已经结束，则只会触发xhr.onerror）。**注意**，只有发生了网络层级别的异常才会触发此事件，对于应用层级别的异常，如响应返回的xhr.statusCode是4xx时，并不属于Network error，所以不会触发onerror事件，而是会触发onload事件。    |\n\n### 4.发送数据\n```javascript\nxhr.send(data);\n```\n* 对于GET/HEAD请求``send``方法通常不传参数\n* 对于POST/DELETE/PUT请求,``xhr.send(data)``的参数data可以是以下几种类型：\n    * [ArrayBuffer](https://developer.mozilla.org/zh-CN/docs/Web/API/ArrayBuffer)\n    * [Blob](https://developer.mozilla.org/zh-CN/docs/Web/API/Blob)\n    * [Document](https://developer.mozilla.org/zh-CN/docs/Web/API/Document)\n    * DOMString\n    * [FormData](https://developer.mozilla.org/zh-CN/docs/Web/API/FormData)\n\n来一个🌰\n\n客户端代码\n```javascript\nvar fileInputElement = document.getElementById('file')\n\nvar oMyForm = new FormData();\n\noMyForm.append(\"username\", \"dcs\");\noMyForm.append(\"num\", 123456); // 数字123456被立即转换成字符串\"123456\"\n\n// fileInputElement中已经包含了用户所选择的文件\nfor (var i = 0; i < fileInputElement.files.length; i++) {\n    oMyForm.append(\"file\", fileInputElement.files[i]);\n}\n\nvar oFileBody = '<a id=\"a\"><b id=\"b\">hey!</b></a>'; // Blob对象包含的文件内容\nvar oBlob = new Blob([oFileBody], {\n    type: \"text/xml\"\n});\noMyForm.append(\"blob\", oBlob);\n\nvar xhr = new XMLHttpRequest();\nxhr.upload.onprogress = function(event) {\n    if (event.lengthComputable) {\n        var completedPercent = event.loaded / event.total;\n        console.log(completedPercent);\n    }\n}\nxhr.open(\"POST\", \"/upload\");\nxhr.send(oMyForm);\n```\n服务端代码\n```javascript\nif (req.url == '/upload' && req.method.toLowerCase() == 'post') {\n    req.on('data', function(buffer) {\n        //会不时的触发data事件来接受客户端传递的数据\n    })\n    .on('end', function() {\n        //数据传递完毕\n    });\n}\n```\n**注意**: 客户端的``xhr.upload.onprogress``表示的是上传进度触发的回调(进度取决于客户端的网络状况),参数``event.total``针对的是所有file的总大小, 而服务端的``req.on('data', function(){})``只是这次请求的数据流接受一定量的数据后触发的回调,两者之间没有直接关系\n\n## 参考资料\n* [你真的会使用XMLHttpRequest吗？](https://segmentfault.com/a/1190000004322487)\n* [MDN XMLHttpRequest](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest)\n* [XMLHttpRequest2 新技巧](https://www.html5rocks.com/zh/tutorials/file/xhr2/)","source":"_posts/关于XMLHttpRequest.md","raw":"---\ntitle: 关于XMLHttpRequest\ndate: 2017-05-07 12:37:45\ntags: javascript\n---\n## XMLHttpRequest是什么\nXMLHttpRequest 是一个[API](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest), 它为客户端提供了在客户端和服务器之间传输数据的功能。它提供了一个通过 URL 来获取数据的简单方式，并且不会使整个页面刷新。这使得网页只更新一部分页面而不会打扰到用户。XMLHttpRequest 在 [AJAX](https://developer.mozilla.org/zh-CN/docs/AJAX) 中被大量使用。\n\n## 兼容性\n![](https://lh2907883.github.io/store/blog/%E5%85%B3%E4%BA%8EXMLHttpRequest/1.png)\n* IE8/IE9也完全不支持xhr对象, 不过可以使用[ActiveXObject](https://msdn.microsoft.com/zh-cn/library/7sw4ddf8%28v=vs.94%29.aspx)类生成xhr实例\n```javascript\nnew window.ActiveXObject( \"Microsoft.XMLHTTP\" )\n```\n* IE10/IE11部分支持，不支持 xhr.responseType为json\n\n## 如何使用\n使用xhr给后台server发送请求,大概可以分下面几个步骤\n### 1.实例化XMLHttpRequest对象\n```javascript\nvar xhr = new XMLHttpRequest();\n```\n\n### 2.初始化一个请求\n```javascript\nxhr.open('POST', '/server', true);\n```\n``open(method, url [, async = true [, username = null [, password = null]]])``\n\nasync: 默认值为true，即为异步请求，若async=false，则为同步请求\n\n### 3.设置xhr参数\n#### 3.1 设置request header\n1. 通过调用setRequestHeader方法,设置请求头,这一步必须在``xhr.open``之后调用\n2. setRequestHeader可以调用多次，最终的值不会采用覆盖override的方式，而是采用追加append的方式\n```javascript\nxhr.setRequestHeader('X-Test', 'one');\nxhr.setRequestHeader('X-Test', 'two');\n// 最终request header中\"X-Test\"为: one, two\n```\n\n#### 3.2 设置response type\n1. 可以设置``xhr.responseType``,下面是responseType支持的类型\n\n| 值             | xhr.response 数据类型         |  说明                               |\n| ------        | -------                       |   ------                           |\n| \"\"            | String                        | 默认值(在不设置responseType时)        |\n| \"text\"        | String                        |                                    |\n| \"document\"    | [Document](https://developer.mozilla.org/zh-CN/docs/Web/API/Document) 对象                  | 希望返回 XML 格式数据时使用           |\n| \"json\"        | javascript 对象                | 存在兼容性问题，IE10/IE11不支持       |\n| \"blob\"        | [Blob](https://developer.mozilla.org/zh-CN/docs/Web/API/Blob)对象                       |                                    |\n| \"arrayBuffer\" | [ArrayBuffer](https://developer.mozilla.org/zh-CN/docs/Web/API/ArrayBuffer)对象                |                                    |\n客户端代码\n```javascript\nvar xhr = new XMLHttpRequest();\nxhr.open('GET', '/json');\nxhr.responseType = 'json';\nxhr.onreadystatechange = function(e) {\n    if (this.readyState == 4 && this.status == 200) {\n        //通过xhr.response可以拿到返回的json数据\n        console.log(this.response);\n    }\n};\nxhr.send();\n```\n服务端代码\n```javascript\nif (req.url == '/json') {\n    res.writeHead(200, { 'content-type': 'application/json' });\n    res.write('{\"a\": 123, \"b\": \"dcs\"}');\n    res.end();\n}\n```\n\n2. 通过调用``xhr.overrideMimeType``方法来重写response的content-type(不过这个方法我调用之后并没有起作用..)\n\n#### 3.3 设置请求超时\n可以设置``xhr.timeout``,来设置超时时间(单位毫秒),在xhr.send()方法调用后开始计时\n\n#### 3.4 设置xhr状态变化时的回调\n```javascript\nxhr.onreadystatechange = function () {\n    switch(xhr.readyState){\n        case 0://UNSENT,open()方法没有调用\n            break;\n        case 1://OPENED,open()方法已被成功调用,send()方法还未被调用。\n            break;\n        case 2://HEADERS_RECEIVED,send()方法已经被调用, 响应头和响应状态已经返回\n            break;\n        case 3://LOADING,响应体下载中,responseText中已经获取了部分数据.\n            break;\n        case 4://DONE,整个请求过程已经完毕.\n            break;\n    }\n}\n```\n#### 3.5 xhr的事件\n| 事件                | 触发条件                          |\n| -----              | -------                          |\n| onreadystatechange |\t每当xhr.readyState改变时触发；但xhr.readyState由非0值变为0时不触发。 |\n| onloadstart\t     |  调用xhr.send()方法后立即触发，若xhr.send()未被调用则不会触发此事件。   |\n| onprogress         |\txhr.upload.onprogress在上传阶段(即xhr.send()之后，xhr.readystate=2之前)触发；xhr.onprogress在下载阶段（即xhr.readystate=3时）触发  |\n| onload             |\t当请求成功完成时触发，此时xhr.readystate=4   |\n| onloadend\t         |  当请求结束（包括请求成功和请求失败）时触发   |\n| onabort            |\t当调用xhr.abort()后触发   |\n| ontimeout          |\txhr.timeout不等于0，由请求开始即onloadstart开始算起，当到达xhr.timeout所设置时间请求还未结束即onloadend，则触发此事件。   |\n| onerror            |\t在请求过程中，若发生Network error则会触发此事件（若发生Network error时，上传还没有结束，则会先触发xhr.upload.onerror，再触发xhr.onerror；若发生Network error时，上传已经结束，则只会触发xhr.onerror）。**注意**，只有发生了网络层级别的异常才会触发此事件，对于应用层级别的异常，如响应返回的xhr.statusCode是4xx时，并不属于Network error，所以不会触发onerror事件，而是会触发onload事件。    |\n\n### 4.发送数据\n```javascript\nxhr.send(data);\n```\n* 对于GET/HEAD请求``send``方法通常不传参数\n* 对于POST/DELETE/PUT请求,``xhr.send(data)``的参数data可以是以下几种类型：\n    * [ArrayBuffer](https://developer.mozilla.org/zh-CN/docs/Web/API/ArrayBuffer)\n    * [Blob](https://developer.mozilla.org/zh-CN/docs/Web/API/Blob)\n    * [Document](https://developer.mozilla.org/zh-CN/docs/Web/API/Document)\n    * DOMString\n    * [FormData](https://developer.mozilla.org/zh-CN/docs/Web/API/FormData)\n\n来一个🌰\n\n客户端代码\n```javascript\nvar fileInputElement = document.getElementById('file')\n\nvar oMyForm = new FormData();\n\noMyForm.append(\"username\", \"dcs\");\noMyForm.append(\"num\", 123456); // 数字123456被立即转换成字符串\"123456\"\n\n// fileInputElement中已经包含了用户所选择的文件\nfor (var i = 0; i < fileInputElement.files.length; i++) {\n    oMyForm.append(\"file\", fileInputElement.files[i]);\n}\n\nvar oFileBody = '<a id=\"a\"><b id=\"b\">hey!</b></a>'; // Blob对象包含的文件内容\nvar oBlob = new Blob([oFileBody], {\n    type: \"text/xml\"\n});\noMyForm.append(\"blob\", oBlob);\n\nvar xhr = new XMLHttpRequest();\nxhr.upload.onprogress = function(event) {\n    if (event.lengthComputable) {\n        var completedPercent = event.loaded / event.total;\n        console.log(completedPercent);\n    }\n}\nxhr.open(\"POST\", \"/upload\");\nxhr.send(oMyForm);\n```\n服务端代码\n```javascript\nif (req.url == '/upload' && req.method.toLowerCase() == 'post') {\n    req.on('data', function(buffer) {\n        //会不时的触发data事件来接受客户端传递的数据\n    })\n    .on('end', function() {\n        //数据传递完毕\n    });\n}\n```\n**注意**: 客户端的``xhr.upload.onprogress``表示的是上传进度触发的回调(进度取决于客户端的网络状况),参数``event.total``针对的是所有file的总大小, 而服务端的``req.on('data', function(){})``只是这次请求的数据流接受一定量的数据后触发的回调,两者之间没有直接关系\n\n## 参考资料\n* [你真的会使用XMLHttpRequest吗？](https://segmentfault.com/a/1190000004322487)\n* [MDN XMLHttpRequest](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest)\n* [XMLHttpRequest2 新技巧](https://www.html5rocks.com/zh/tutorials/file/xhr2/)","slug":"关于XMLHttpRequest","published":1,"updated":"2017-05-07T15:34:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2n3r71e000410txnc27anrb","content":"<h2 id=\"XMLHttpRequest是什么\"><a href=\"#XMLHttpRequest是什么\" class=\"headerlink\" title=\"XMLHttpRequest是什么\"></a>XMLHttpRequest是什么</h2><p>XMLHttpRequest 是一个<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest\" target=\"_blank\" rel=\"external\">API</a>, 它为客户端提供了在客户端和服务器之间传输数据的功能。它提供了一个通过 URL 来获取数据的简单方式，并且不会使整个页面刷新。这使得网页只更新一部分页面而不会打扰到用户。XMLHttpRequest 在 <a href=\"https://developer.mozilla.org/zh-CN/docs/AJAX\" target=\"_blank\" rel=\"external\">AJAX</a> 中被大量使用。</p>\n<h2 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h2><p><img src=\"https://lh2907883.github.io/store/blog/%E5%85%B3%E4%BA%8EXMLHttpRequest/1.png\" alt=\"\"></p>\n<ul>\n<li><p>IE8/IE9也完全不支持xhr对象, 不过可以使用<a href=\"https://msdn.microsoft.com/zh-cn/library/7sw4ddf8%28v=vs.94%29.aspx\" target=\"_blank\" rel=\"external\">ActiveXObject</a>类生成xhr实例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">window</span>.ActiveXObject( <span class=\"string\">\"Microsoft.XMLHTTP\"</span> )</div></pre></td></tr></table></figure>\n</li>\n<li><p>IE10/IE11部分支持，不支持 xhr.responseType为json</p>\n</li>\n</ul>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><p>使用xhr给后台server发送请求,大概可以分下面几个步骤</p>\n<h3 id=\"1-实例化XMLHttpRequest对象\"><a href=\"#1-实例化XMLHttpRequest对象\" class=\"headerlink\" title=\"1.实例化XMLHttpRequest对象\"></a>1.实例化XMLHttpRequest对象</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div></pre></td></tr></table></figure>\n<h3 id=\"2-初始化一个请求\"><a href=\"#2-初始化一个请求\" class=\"headerlink\" title=\"2.初始化一个请求\"></a>2.初始化一个请求</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xhr.open(<span class=\"string\">'POST'</span>, <span class=\"string\">'/server'</span>, <span class=\"literal\">true</span>);</div></pre></td></tr></table></figure>\n<p><code>open(method, url [, async = true [, username = null [, password = null]]])</code></p>\n<p>async: 默认值为true，即为异步请求，若async=false，则为同步请求</p>\n<h3 id=\"3-设置xhr参数\"><a href=\"#3-设置xhr参数\" class=\"headerlink\" title=\"3.设置xhr参数\"></a>3.设置xhr参数</h3><h4 id=\"3-1-设置request-header\"><a href=\"#3-1-设置request-header\" class=\"headerlink\" title=\"3.1 设置request header\"></a>3.1 设置request header</h4><ol>\n<li>通过调用setRequestHeader方法,设置请求头,这一步必须在<code>xhr.open</code>之后调用</li>\n<li>setRequestHeader可以调用多次，最终的值不会采用覆盖override的方式，而是采用追加append的方式<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">xhr.setRequestHeader(<span class=\"string\">'X-Test'</span>, <span class=\"string\">'one'</span>);</div><div class=\"line\">xhr.setRequestHeader(<span class=\"string\">'X-Test'</span>, <span class=\"string\">'two'</span>);</div><div class=\"line\"><span class=\"comment\">// 最终request header中\"X-Test\"为: one, two</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"3-2-设置response-type\"><a href=\"#3-2-设置response-type\" class=\"headerlink\" title=\"3.2 设置response type\"></a>3.2 设置response type</h4><ol>\n<li>可以设置<code>xhr.responseType</code>,下面是responseType支持的类型</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>xhr.response 数据类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>“”</td>\n<td>String</td>\n<td>默认值(在不设置responseType时)</td>\n</tr>\n<tr>\n<td>“text”</td>\n<td>String</td>\n<td></td>\n</tr>\n<tr>\n<td>“document”</td>\n<td><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document\" target=\"_blank\" rel=\"external\">Document</a> 对象</td>\n<td>希望返回 XML 格式数据时使用</td>\n</tr>\n<tr>\n<td>“json”</td>\n<td>javascript 对象</td>\n<td>存在兼容性问题，IE10/IE11不支持</td>\n</tr>\n<tr>\n<td>“blob”</td>\n<td><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob\" target=\"_blank\" rel=\"external\">Blob</a>对象</td>\n<td></td>\n</tr>\n<tr>\n<td>“arrayBuffer”</td>\n<td><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/ArrayBuffer\" target=\"_blank\" rel=\"external\">ArrayBuffer</a>对象</td>\n</tr>\n</tbody>\n</table>\n<p>客户端代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">xhr.open(<span class=\"string\">'GET'</span>, <span class=\"string\">'/json'</span>);</div><div class=\"line\">xhr.responseType = <span class=\"string\">'json'</span>;</div><div class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.readyState == <span class=\"number\">4</span> &amp;&amp; <span class=\"keyword\">this</span>.status == <span class=\"number\">200</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">//通过xhr.response可以拿到返回的json数据</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.response);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">xhr.send();</div></pre></td></tr></table></figure></p>\n<p>服务端代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (req.url == <span class=\"string\">'/json'</span>) &#123;</div><div class=\"line\">    res.writeHead(<span class=\"number\">200</span>, &#123; <span class=\"string\">'content-type'</span>: <span class=\"string\">'application/json'</span> &#125;);</div><div class=\"line\">    res.write(<span class=\"string\">'&#123;\"a\": 123, \"b\": \"dcs\"&#125;'</span>);</div><div class=\"line\">    res.end();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ol>\n<li>通过调用<code>xhr.overrideMimeType</code>方法来重写response的content-type(不过这个方法我调用之后并没有起作用..)</li>\n</ol>\n<h4 id=\"3-3-设置请求超时\"><a href=\"#3-3-设置请求超时\" class=\"headerlink\" title=\"3.3 设置请求超时\"></a>3.3 设置请求超时</h4><p>可以设置<code>xhr.timeout</code>,来设置超时时间(单位毫秒),在xhr.send()方法调用后开始计时</p>\n<h4 id=\"3-4-设置xhr状态变化时的回调\"><a href=\"#3-4-设置xhr状态变化时的回调\" class=\"headerlink\" title=\"3.4 设置xhr状态变化时的回调\"></a>3.4 设置xhr状态变化时的回调</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span>(xhr.readyState)&#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:<span class=\"comment\">//UNSENT,open()方法没有调用</span></div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:<span class=\"comment\">//OPENED,open()方法已被成功调用,send()方法还未被调用。</span></div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:<span class=\"comment\">//HEADERS_RECEIVED,send()方法已经被调用, 响应头和响应状态已经返回</span></div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:<span class=\"comment\">//LOADING,响应体下载中,responseText中已经获取了部分数据.</span></div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">4</span>:<span class=\"comment\">//DONE,整个请求过程已经完毕.</span></div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-5-xhr的事件\"><a href=\"#3-5-xhr的事件\" class=\"headerlink\" title=\"3.5 xhr的事件\"></a>3.5 xhr的事件</h4><table>\n<thead>\n<tr>\n<th>事件</th>\n<th>触发条件</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>onreadystatechange</td>\n<td>每当xhr.readyState改变时触发；但xhr.readyState由非0值变为0时不触发。</td>\n</tr>\n<tr>\n<td>onloadstart</td>\n<td>调用xhr.send()方法后立即触发，若xhr.send()未被调用则不会触发此事件。</td>\n</tr>\n<tr>\n<td>onprogress</td>\n<td>xhr.upload.onprogress在上传阶段(即xhr.send()之后，xhr.readystate=2之前)触发；xhr.onprogress在下载阶段（即xhr.readystate=3时）触发</td>\n</tr>\n<tr>\n<td>onload</td>\n<td>当请求成功完成时触发，此时xhr.readystate=4</td>\n</tr>\n<tr>\n<td>onloadend</td>\n<td>当请求结束（包括请求成功和请求失败）时触发</td>\n</tr>\n<tr>\n<td>onabort</td>\n<td>当调用xhr.abort()后触发</td>\n</tr>\n<tr>\n<td>ontimeout</td>\n<td>xhr.timeout不等于0，由请求开始即onloadstart开始算起，当到达xhr.timeout所设置时间请求还未结束即onloadend，则触发此事件。</td>\n</tr>\n<tr>\n<td>onerror</td>\n<td>在请求过程中，若发生Network error则会触发此事件（若发生Network error时，上传还没有结束，则会先触发xhr.upload.onerror，再触发xhr.onerror；若发生Network error时，上传已经结束，则只会触发xhr.onerror）。<strong>注意</strong>，只有发生了网络层级别的异常才会触发此事件，对于应用层级别的异常，如响应返回的xhr.statusCode是4xx时，并不属于Network error，所以不会触发onerror事件，而是会触发onload事件。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"4-发送数据\"><a href=\"#4-发送数据\" class=\"headerlink\" title=\"4.发送数据\"></a>4.发送数据</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xhr.send(data);</div></pre></td></tr></table></figure>\n<ul>\n<li>对于GET/HEAD请求<code>send</code>方法通常不传参数</li>\n<li>对于POST/DELETE/PUT请求,<code>xhr.send(data)</code>的参数data可以是以下几种类型：<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/ArrayBuffer\" target=\"_blank\" rel=\"external\">ArrayBuffer</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob\" target=\"_blank\" rel=\"external\">Blob</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document\" target=\"_blank\" rel=\"external\">Document</a></li>\n<li>DOMString</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/FormData\" target=\"_blank\" rel=\"external\">FormData</a></li>\n</ul>\n</li>\n</ul>\n<p>来一个🌰</p>\n<p>客户端代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fileInputElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'file'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> oMyForm = <span class=\"keyword\">new</span> FormData();</div><div class=\"line\"></div><div class=\"line\">oMyForm.append(<span class=\"string\">\"username\"</span>, <span class=\"string\">\"dcs\"</span>);</div><div class=\"line\">oMyForm.append(<span class=\"string\">\"num\"</span>, <span class=\"number\">123456</span>); <span class=\"comment\">// 数字123456被立即转换成字符串\"123456\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// fileInputElement中已经包含了用户所选择的文件</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; fileInputElement.files.length; i++) &#123;</div><div class=\"line\">    oMyForm.append(<span class=\"string\">\"file\"</span>, fileInputElement.files[i]);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> oFileBody = <span class=\"string\">'&lt;a id=\"a\"&gt;&lt;b id=\"b\"&gt;hey!&lt;/b&gt;&lt;/a&gt;'</span>; <span class=\"comment\">// Blob对象包含的文件内容</span></div><div class=\"line\"><span class=\"keyword\">var</span> oBlob = <span class=\"keyword\">new</span> Blob([oFileBody], &#123;</div><div class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">\"text/xml\"</span></div><div class=\"line\">&#125;);</div><div class=\"line\">oMyForm.append(<span class=\"string\">\"blob\"</span>, oBlob);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">xhr.upload.onprogress = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (event.lengthComputable) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> completedPercent = event.loaded / event.total;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(completedPercent);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">xhr.open(<span class=\"string\">\"POST\"</span>, <span class=\"string\">\"/upload\"</span>);</div><div class=\"line\">xhr.send(oMyForm);</div></pre></td></tr></table></figure></p>\n<p>服务端代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (req.url == <span class=\"string\">'/upload'</span> &amp;&amp; req.method.toLowerCase() == <span class=\"string\">'post'</span>) &#123;</div><div class=\"line\">    req.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">buffer</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//会不时的触发data事件来接受客户端传递的数据</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">    .on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//数据传递完毕</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>注意</strong>: 客户端的<code>xhr.upload.onprogress</code>表示的是上传进度触发的回调(进度取决于客户端的网络状况),参数<code>event.total</code>针对的是所有file的总大小, 而服务端的<code>req.on(&#39;data&#39;, function(){})</code>只是这次请求的数据流接受一定量的数据后触发的回调,两者之间没有直接关系</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://segmentfault.com/a/1190000004322487\" target=\"_blank\" rel=\"external\">你真的会使用XMLHttpRequest吗？</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest\" target=\"_blank\" rel=\"external\">MDN XMLHttpRequest</a></li>\n<li><a href=\"https://www.html5rocks.com/zh/tutorials/file/xhr2/\" target=\"_blank\" rel=\"external\">XMLHttpRequest2 新技巧</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"XMLHttpRequest是什么\"><a href=\"#XMLHttpRequest是什么\" class=\"headerlink\" title=\"XMLHttpRequest是什么\"></a>XMLHttpRequest是什么</h2><p>XMLHttpRequest 是一个<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest\" target=\"_blank\" rel=\"external\">API</a>, 它为客户端提供了在客户端和服务器之间传输数据的功能。它提供了一个通过 URL 来获取数据的简单方式，并且不会使整个页面刷新。这使得网页只更新一部分页面而不会打扰到用户。XMLHttpRequest 在 <a href=\"https://developer.mozilla.org/zh-CN/docs/AJAX\" target=\"_blank\" rel=\"external\">AJAX</a> 中被大量使用。</p>\n<h2 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h2><p><img src=\"https://lh2907883.github.io/store/blog/%E5%85%B3%E4%BA%8EXMLHttpRequest/1.png\" alt=\"\"></p>\n<ul>\n<li><p>IE8/IE9也完全不支持xhr对象, 不过可以使用<a href=\"https://msdn.microsoft.com/zh-cn/library/7sw4ddf8%28v=vs.94%29.aspx\" target=\"_blank\" rel=\"external\">ActiveXObject</a>类生成xhr实例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">window</span>.ActiveXObject( <span class=\"string\">\"Microsoft.XMLHTTP\"</span> )</div></pre></td></tr></table></figure>\n</li>\n<li><p>IE10/IE11部分支持，不支持 xhr.responseType为json</p>\n</li>\n</ul>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><p>使用xhr给后台server发送请求,大概可以分下面几个步骤</p>\n<h3 id=\"1-实例化XMLHttpRequest对象\"><a href=\"#1-实例化XMLHttpRequest对象\" class=\"headerlink\" title=\"1.实例化XMLHttpRequest对象\"></a>1.实例化XMLHttpRequest对象</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div></pre></td></tr></table></figure>\n<h3 id=\"2-初始化一个请求\"><a href=\"#2-初始化一个请求\" class=\"headerlink\" title=\"2.初始化一个请求\"></a>2.初始化一个请求</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xhr.open(<span class=\"string\">'POST'</span>, <span class=\"string\">'/server'</span>, <span class=\"literal\">true</span>);</div></pre></td></tr></table></figure>\n<p><code>open(method, url [, async = true [, username = null [, password = null]]])</code></p>\n<p>async: 默认值为true，即为异步请求，若async=false，则为同步请求</p>\n<h3 id=\"3-设置xhr参数\"><a href=\"#3-设置xhr参数\" class=\"headerlink\" title=\"3.设置xhr参数\"></a>3.设置xhr参数</h3><h4 id=\"3-1-设置request-header\"><a href=\"#3-1-设置request-header\" class=\"headerlink\" title=\"3.1 设置request header\"></a>3.1 设置request header</h4><ol>\n<li>通过调用setRequestHeader方法,设置请求头,这一步必须在<code>xhr.open</code>之后调用</li>\n<li>setRequestHeader可以调用多次，最终的值不会采用覆盖override的方式，而是采用追加append的方式<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">xhr.setRequestHeader(<span class=\"string\">'X-Test'</span>, <span class=\"string\">'one'</span>);</div><div class=\"line\">xhr.setRequestHeader(<span class=\"string\">'X-Test'</span>, <span class=\"string\">'two'</span>);</div><div class=\"line\"><span class=\"comment\">// 最终request header中\"X-Test\"为: one, two</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"3-2-设置response-type\"><a href=\"#3-2-设置response-type\" class=\"headerlink\" title=\"3.2 设置response type\"></a>3.2 设置response type</h4><ol>\n<li>可以设置<code>xhr.responseType</code>,下面是responseType支持的类型</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>xhr.response 数据类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>“”</td>\n<td>String</td>\n<td>默认值(在不设置responseType时)</td>\n</tr>\n<tr>\n<td>“text”</td>\n<td>String</td>\n<td></td>\n</tr>\n<tr>\n<td>“document”</td>\n<td><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document\" target=\"_blank\" rel=\"external\">Document</a> 对象</td>\n<td>希望返回 XML 格式数据时使用</td>\n</tr>\n<tr>\n<td>“json”</td>\n<td>javascript 对象</td>\n<td>存在兼容性问题，IE10/IE11不支持</td>\n</tr>\n<tr>\n<td>“blob”</td>\n<td><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob\" target=\"_blank\" rel=\"external\">Blob</a>对象</td>\n<td></td>\n</tr>\n<tr>\n<td>“arrayBuffer”</td>\n<td><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/ArrayBuffer\" target=\"_blank\" rel=\"external\">ArrayBuffer</a>对象</td>\n</tr>\n</tbody>\n</table>\n<p>客户端代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">xhr.open(<span class=\"string\">'GET'</span>, <span class=\"string\">'/json'</span>);</div><div class=\"line\">xhr.responseType = <span class=\"string\">'json'</span>;</div><div class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.readyState == <span class=\"number\">4</span> &amp;&amp; <span class=\"keyword\">this</span>.status == <span class=\"number\">200</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">//通过xhr.response可以拿到返回的json数据</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.response);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">xhr.send();</div></pre></td></tr></table></figure></p>\n<p>服务端代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (req.url == <span class=\"string\">'/json'</span>) &#123;</div><div class=\"line\">    res.writeHead(<span class=\"number\">200</span>, &#123; <span class=\"string\">'content-type'</span>: <span class=\"string\">'application/json'</span> &#125;);</div><div class=\"line\">    res.write(<span class=\"string\">'&#123;\"a\": 123, \"b\": \"dcs\"&#125;'</span>);</div><div class=\"line\">    res.end();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ol>\n<li>通过调用<code>xhr.overrideMimeType</code>方法来重写response的content-type(不过这个方法我调用之后并没有起作用..)</li>\n</ol>\n<h4 id=\"3-3-设置请求超时\"><a href=\"#3-3-设置请求超时\" class=\"headerlink\" title=\"3.3 设置请求超时\"></a>3.3 设置请求超时</h4><p>可以设置<code>xhr.timeout</code>,来设置超时时间(单位毫秒),在xhr.send()方法调用后开始计时</p>\n<h4 id=\"3-4-设置xhr状态变化时的回调\"><a href=\"#3-4-设置xhr状态变化时的回调\" class=\"headerlink\" title=\"3.4 设置xhr状态变化时的回调\"></a>3.4 设置xhr状态变化时的回调</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span>(xhr.readyState)&#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>:<span class=\"comment\">//UNSENT,open()方法没有调用</span></div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:<span class=\"comment\">//OPENED,open()方法已被成功调用,send()方法还未被调用。</span></div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:<span class=\"comment\">//HEADERS_RECEIVED,send()方法已经被调用, 响应头和响应状态已经返回</span></div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:<span class=\"comment\">//LOADING,响应体下载中,responseText中已经获取了部分数据.</span></div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">4</span>:<span class=\"comment\">//DONE,整个请求过程已经完毕.</span></div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"3-5-xhr的事件\"><a href=\"#3-5-xhr的事件\" class=\"headerlink\" title=\"3.5 xhr的事件\"></a>3.5 xhr的事件</h4><table>\n<thead>\n<tr>\n<th>事件</th>\n<th>触发条件</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>onreadystatechange</td>\n<td>每当xhr.readyState改变时触发；但xhr.readyState由非0值变为0时不触发。</td>\n</tr>\n<tr>\n<td>onloadstart</td>\n<td>调用xhr.send()方法后立即触发，若xhr.send()未被调用则不会触发此事件。</td>\n</tr>\n<tr>\n<td>onprogress</td>\n<td>xhr.upload.onprogress在上传阶段(即xhr.send()之后，xhr.readystate=2之前)触发；xhr.onprogress在下载阶段（即xhr.readystate=3时）触发</td>\n</tr>\n<tr>\n<td>onload</td>\n<td>当请求成功完成时触发，此时xhr.readystate=4</td>\n</tr>\n<tr>\n<td>onloadend</td>\n<td>当请求结束（包括请求成功和请求失败）时触发</td>\n</tr>\n<tr>\n<td>onabort</td>\n<td>当调用xhr.abort()后触发</td>\n</tr>\n<tr>\n<td>ontimeout</td>\n<td>xhr.timeout不等于0，由请求开始即onloadstart开始算起，当到达xhr.timeout所设置时间请求还未结束即onloadend，则触发此事件。</td>\n</tr>\n<tr>\n<td>onerror</td>\n<td>在请求过程中，若发生Network error则会触发此事件（若发生Network error时，上传还没有结束，则会先触发xhr.upload.onerror，再触发xhr.onerror；若发生Network error时，上传已经结束，则只会触发xhr.onerror）。<strong>注意</strong>，只有发生了网络层级别的异常才会触发此事件，对于应用层级别的异常，如响应返回的xhr.statusCode是4xx时，并不属于Network error，所以不会触发onerror事件，而是会触发onload事件。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"4-发送数据\"><a href=\"#4-发送数据\" class=\"headerlink\" title=\"4.发送数据\"></a>4.发送数据</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">xhr.send(data);</div></pre></td></tr></table></figure>\n<ul>\n<li>对于GET/HEAD请求<code>send</code>方法通常不传参数</li>\n<li>对于POST/DELETE/PUT请求,<code>xhr.send(data)</code>的参数data可以是以下几种类型：<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/ArrayBuffer\" target=\"_blank\" rel=\"external\">ArrayBuffer</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob\" target=\"_blank\" rel=\"external\">Blob</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document\" target=\"_blank\" rel=\"external\">Document</a></li>\n<li>DOMString</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/FormData\" target=\"_blank\" rel=\"external\">FormData</a></li>\n</ul>\n</li>\n</ul>\n<p>来一个🌰</p>\n<p>客户端代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fileInputElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'file'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> oMyForm = <span class=\"keyword\">new</span> FormData();</div><div class=\"line\"></div><div class=\"line\">oMyForm.append(<span class=\"string\">\"username\"</span>, <span class=\"string\">\"dcs\"</span>);</div><div class=\"line\">oMyForm.append(<span class=\"string\">\"num\"</span>, <span class=\"number\">123456</span>); <span class=\"comment\">// 数字123456被立即转换成字符串\"123456\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// fileInputElement中已经包含了用户所选择的文件</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; fileInputElement.files.length; i++) &#123;</div><div class=\"line\">    oMyForm.append(<span class=\"string\">\"file\"</span>, fileInputElement.files[i]);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> oFileBody = <span class=\"string\">'&lt;a id=\"a\"&gt;&lt;b id=\"b\"&gt;hey!&lt;/b&gt;&lt;/a&gt;'</span>; <span class=\"comment\">// Blob对象包含的文件内容</span></div><div class=\"line\"><span class=\"keyword\">var</span> oBlob = <span class=\"keyword\">new</span> Blob([oFileBody], &#123;</div><div class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">\"text/xml\"</span></div><div class=\"line\">&#125;);</div><div class=\"line\">oMyForm.append(<span class=\"string\">\"blob\"</span>, oBlob);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">xhr.upload.onprogress = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (event.lengthComputable) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> completedPercent = event.loaded / event.total;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(completedPercent);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">xhr.open(<span class=\"string\">\"POST\"</span>, <span class=\"string\">\"/upload\"</span>);</div><div class=\"line\">xhr.send(oMyForm);</div></pre></td></tr></table></figure></p>\n<p>服务端代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (req.url == <span class=\"string\">'/upload'</span> &amp;&amp; req.method.toLowerCase() == <span class=\"string\">'post'</span>) &#123;</div><div class=\"line\">    req.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">buffer</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//会不时的触发data事件来接受客户端传递的数据</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">    .on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//数据传递完毕</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>注意</strong>: 客户端的<code>xhr.upload.onprogress</code>表示的是上传进度触发的回调(进度取决于客户端的网络状况),参数<code>event.total</code>针对的是所有file的总大小, 而服务端的<code>req.on(&#39;data&#39;, function(){})</code>只是这次请求的数据流接受一定量的数据后触发的回调,两者之间没有直接关系</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://segmentfault.com/a/1190000004322487\" target=\"_blank\" rel=\"external\">你真的会使用XMLHttpRequest吗？</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest\" target=\"_blank\" rel=\"external\">MDN XMLHttpRequest</a></li>\n<li><a href=\"https://www.html5rocks.com/zh/tutorials/file/xhr2/\" target=\"_blank\" rel=\"external\">XMLHttpRequest2 新技巧</a></li>\n</ul>\n"},{"title":"web离线应用","date":"2017-05-14T07:57:53.000Z","_content":"\n## 什么是web离线应用\n在正常情况下,客户端使用HTTP协议通过网络得到服务器的资源,然后展示,但是如果在网络断开的情况下,客户端就没办法了,这时就需要一种技术去解决这一问题,目前有两种方式:[AppCache](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Using_the_application_cache)和[Service Workers](https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API/Using_Service_Workers#Browser_compatibility),他们都是通过在断网时读取本地缓存资源来实现web应用的离线访问的.\n\n## 比较AppCache和Service Workers\n### 使用方式\nAppCache通过指定缓存清单文件来设置哪些资源需要被缓存\n\nService Workers则有更新强大的API来通过脚本精准控制缓存(包括更新,追加,删除缓存)\n\n### 兼容性\n下图是各大浏览器对AppCache的支持情况,可以看出基本都支持\n![](https://lh2907883.github.io/store/blog/web%E7%A6%BB%E7%BA%BF%E5%BA%94%E7%94%A8/1.png)\n\n而Service Workers还是有一部分浏览器不支持的(特别是移动平台)\n![](https://lh2907883.github.io/store/blog/web%E7%A6%BB%E7%BA%BF%E5%BA%94%E7%94%A8/2.png)\n\n### W3C标准\n如果你看过[AppCache](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Using_the_application_cache)的文档,你会发现\n> 该特性已经从Web标准中删除，虽然一些浏览器目前仍然支持它，但也许会在未来的某个时间停止支持，请尽量不要使用该特性。\n\n> 在此刻使用这里描述的应用程序缓存功能高度不鼓励; 它正在处于从Web平台中被删除的过程。请改用[Service Workers](https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API/Using_Service_Workers#Browser_compatibility)代替。\n\n我个人认为Service Workers各方面都要优于AppCache,除了兼容性,不过既然Service Workers已经是W3C标准,想必未来的支持情况应该会好一些,所以下面我们将详细讨论Service Workers的用法\n\n## 使用Service Workers的前提条件\n> 在已经支持 serivce workers 的浏览器的版本中, 很多特性没有默认开启, 需要开启一下浏览器的相关配置：\n> * Firefox Nightly: 访问 about:config 并设置 dom.serviceWorkers.enabled 的值为 true; 重启浏览器；\n> * Chrome Canary: 访问 chrome://flags 并开启 experimental-web-platform-features; 重启浏览器 (注意：有些特性在Chrome中没有默认开放支持)；\n> * Opera: 访问 opera://flags 并开启 ServiceWorker 的支持; 重启浏览器。 \n\n> 另外，你需要通过 **HTTPS** 来访问你的页面 — 出于安全原因，Service Workers 要求要在必须在 HTTPS 下才能运行。Github 是个用来测试的好地方，因为它就支持HTTPS。为了便于本地开发，localhost 也被浏览器认为是安全源。\n\n## 如何使用\n### 注册service worker\n```javascript\n/**\n * @scriptURL ServiceWorker脚本资源路径(可以是绝对或者相对当前URL的路径)\n * @options {scope: './'} scope是一个路径,默认值就是'./',它总是相对于ServiceWorker脚本资源路径的,scope指定了一个ServiceWorker的生效范围,只有在这个路径范围内的资源才能支持离线访问(所以跨域的资源是没法离线访问的)\n */\nServiceWorkerContainer.register(scriptURL, options)\n    .then(\n        function(ServiceWorkerRegistration) {\n            // do something\n        }\n);\n```\n代码如下:\n```javascript\n//兼容性判断\nif ('serviceWorker' in navigator) {\n    navigator.serviceWorker.register('sw.js', {scope: './'}).then(function(reg) {\n        if (reg.installing) {\n            console.log('Service worker installing');\n        } else if (reg.waiting) {\n            console.log('Service worker installed');\n        } else if (reg.active) {\n            console.log('Service worker active');\n        }\n    }).catch(function(error) {\n        // registration failed\n        console.log('Registration failed with ' + error);\n    });\n}\n```\n事实上当浏览器运行上面的代码时, 会先检测是否之前就获取并注册过**sw.js**\n* 如果是**首次运行**,那就先下载并保存在本地, chrome中可以在*Application -> Service Workers*面板中查看\n![](https://lh2907883.github.io/store/blog/web%E7%A6%BB%E7%BA%BF%E5%BA%94%E7%94%A8/3.png)\n这时会触发Service Worker的``install``事件,之后会进入``navigator.serviceWorker.register``返回的``Promise.then``,状态``state``为``installing``. \n* 如果发现本地已经有**sw.js** *(即使本地的**sw.js**不是最新代码,这次访问任然会使用本地**sw.js**的代码)*,那么会直接进入``navigator.serviceWorker.register``返回的``Promise.then``,状态``state``为``activated``,这时Service Worker为已激活状态,后面只要是有``scope``范围内的请求都会被Service Worker的``fetch``事件拦截*(注意:如果在scope下的html页面访问了跨域的资源,比如图片什么的,那这个跨域资源请求也会被拦截)*,在``fetch``的回调函数里面你可以自行控制是**读缓存**,还是**请求网络**,你甚至可以**伪造响应数据** *(我想这也是为什么Service Worker只支持HTTPS的原因)*\n* 如果发现本地已经有**sw.js**并且本地的**sw.js**不是最新代码,那么**sw.js**会自动更新,并触发Service Worker的``install``事件,在下次访问页面时将使用新版本的**sw.js**.\n\n### 关于sw.js\n#### sw.js的职责\n从上面的描述,我们可以看出**sw.js**的职责其实是控制web应用中资源的访问策略,他和具体的业务逻辑,UI操作都没有任何关系,官方说明:\n> 如果注册成功，service worker 就在 [ServiceWorkerGlobalScope](https://developer.mozilla.org/zh-CN/docs/Web/API/ServiceWorkerGlobalScope) 环境中运行； 这是一个特殊类型的 woker 上下文运行环境，与主运行线程（执行脚本）相独立，同时也没有访问 DOM 的能力。\n\n#### 具体实现\n* 注册install事件\n```javascript\nthis.addEventListener('install', function(event) {\n    //console.log('sw.js install');\n    event.waitUntil(\n        caches.open('v1').then(function(cache) {\n            return cache.addAll([\n                '/demo/service-workers/',\n                '/demo/service-workers/index.html',\n                '/demo/service-workers/js/main.js',\n                '/demo/service-workers/json/data.json',\n                '/demo/service-workers/images/1.jpg',\n                '/demo/service-workers/images/2.jpg',\n            ]);\n        })\n    );\n});\n```\n> install 事件一般是被用来填充你的浏览器的离线缓存能力。为了达成这个目的，我们使用了 Service Worker 的 新的标志性的存储 [API — cache](https://developer.mozilla.org/zh-CN/docs/Web/API/Cache) — 一个 service worker 上的全局对象，它使我们可以存储网络响应发来的资源，并且根据它们的请求来生成key。这个 API 和浏览器的标准的缓存工作原理很相似，但是是特定你的域的。它会一直持久存在，直到你告诉它不再存储，你拥有全部的控制权。\n> 注意:  Cache API  并不被每个浏览器支持。（查看 Browser support  部分了解更多信息。） 如果你现在就想使用它，可以考虑采用一个 polyfill，比如 [Google topeka demo](https://github.com/Polymer/topeka/blob/master/sw.js)，或者把你的资源存储在 [IndexedDB](https://developer.mozilla.org/zh-CN/docs/Glossary/IndexedDB) 中。\n\n缓存方案有很多种, 示例代码中采用``Cache``, 值得注意的是``cache.addAll``可不仅仅只是记录需要缓存的资源URL列表, 它同时还会``fetch``这些资源把响应数据缓存起来,以便后面访问的时候使用 *(如果是一个复杂的web应用,个人觉得有些不太合理,谁又会在页面刚刚进来时就加载所有资源呢?)*\n\n* 注册fetch事件\n```javascript\nthis.addEventListener('fetch', function(event) {\n    //console.log(event.request);\n    //console.log(caches);\n    event.respondWith(\n        caches.match(event.request)\n        .catch(function() {\n            return fetch(event.request);\n        }).then(function(response) {\n            //console.log(response);\n            caches.open('v1').then(function(cache) {\n                //console.log(cache);\n                cache.put(event.request, response);\n            });\n            return response.clone();\n        })\n    );\n});\n```\n1. ``event.respondWith``接受一个返回response响应的Promise\n2. ``caches.match``会尝试在缓存中匹配当前fetch的请求,匹配到了就直接返回response\n3. ``cache.put``则是更新缓存\n\n* 注册activate事件\n```javascript\nthis.addEventListener('activate', function(event) {\n    var cacheWhitelist = ['v2'];\n\n    event.waitUntil(\n        caches.keys().then(function(keyList) {\n            return Promise.all(keyList.map(function(key) {\n                if (cacheWhitelist.indexOf(key) === -1) {\n                    return caches.delete(key);\n                }\n            }));\n        })\n    );\n});\n```\nactivate事件回调一般被用来删除旧的缓存\n\n#### 改进后的代码\n```javascript\nthis.addEventListener('install', function(event) {\n    console.log('sw.js install');\n    event.waitUntil(\n        //这里先不往缓存中写\n        caches.open('v1').then(function(cache) {\n            return cache.addAll([\n                // '/demo/service-workers/',\n                // '/demo/service-workers/index.html',\n                // '/demo/service-workers/js/main.js',\n                // '/demo/service-workers/json/data.json',\n                // '/demo/service-workers/images/1.jpg',\n                // '/demo/service-workers/images/2.jpg',\n                // '/demo/service-workers/child.html',\n            ]);\n        })\n    );\n});\nthis.addEventListener('fetch', function(event) {\n    event.respondWith(\n        caches.match(event.request)\n        .then(function(response) {\n            if (response) {\n                //如果匹配到了\n                return response;\n            } else {\n                //如果有资源没有匹配(比如child.html里面的跨域图片),就先发请求访问,然后缓存一份\n                console.log('url not match;' + event.request.url);\n                return fetch(event.request).then(function(response) {\n                    console.log(response);\n                    caches.open('v1').then(function(cache) {\n                        cache.put(event.request, response);\n                    });\n                    return response.clone();\n                });\n            }\n        })\n        .catch(function() {\n            return fetch(event.request);\n        })\n    );\n});\nthis.addEventListener('activate', function(event) {\n    console.log('activate')\n});\n```\n[演示地址](https://lh2907883.github.io/store/demo/service-workers/)\n\n## 参考资料\n* [MDN 使用 Service Workers](https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API/Using_Service_Workers)\n","source":"_posts/web离线应用.md","raw":"---\ntitle: web离线应用\ntags: javascript\ndate: 2017-05-14 15:57:53\n---\n\n## 什么是web离线应用\n在正常情况下,客户端使用HTTP协议通过网络得到服务器的资源,然后展示,但是如果在网络断开的情况下,客户端就没办法了,这时就需要一种技术去解决这一问题,目前有两种方式:[AppCache](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Using_the_application_cache)和[Service Workers](https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API/Using_Service_Workers#Browser_compatibility),他们都是通过在断网时读取本地缓存资源来实现web应用的离线访问的.\n\n## 比较AppCache和Service Workers\n### 使用方式\nAppCache通过指定缓存清单文件来设置哪些资源需要被缓存\n\nService Workers则有更新强大的API来通过脚本精准控制缓存(包括更新,追加,删除缓存)\n\n### 兼容性\n下图是各大浏览器对AppCache的支持情况,可以看出基本都支持\n![](https://lh2907883.github.io/store/blog/web%E7%A6%BB%E7%BA%BF%E5%BA%94%E7%94%A8/1.png)\n\n而Service Workers还是有一部分浏览器不支持的(特别是移动平台)\n![](https://lh2907883.github.io/store/blog/web%E7%A6%BB%E7%BA%BF%E5%BA%94%E7%94%A8/2.png)\n\n### W3C标准\n如果你看过[AppCache](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Using_the_application_cache)的文档,你会发现\n> 该特性已经从Web标准中删除，虽然一些浏览器目前仍然支持它，但也许会在未来的某个时间停止支持，请尽量不要使用该特性。\n\n> 在此刻使用这里描述的应用程序缓存功能高度不鼓励; 它正在处于从Web平台中被删除的过程。请改用[Service Workers](https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API/Using_Service_Workers#Browser_compatibility)代替。\n\n我个人认为Service Workers各方面都要优于AppCache,除了兼容性,不过既然Service Workers已经是W3C标准,想必未来的支持情况应该会好一些,所以下面我们将详细讨论Service Workers的用法\n\n## 使用Service Workers的前提条件\n> 在已经支持 serivce workers 的浏览器的版本中, 很多特性没有默认开启, 需要开启一下浏览器的相关配置：\n> * Firefox Nightly: 访问 about:config 并设置 dom.serviceWorkers.enabled 的值为 true; 重启浏览器；\n> * Chrome Canary: 访问 chrome://flags 并开启 experimental-web-platform-features; 重启浏览器 (注意：有些特性在Chrome中没有默认开放支持)；\n> * Opera: 访问 opera://flags 并开启 ServiceWorker 的支持; 重启浏览器。 \n\n> 另外，你需要通过 **HTTPS** 来访问你的页面 — 出于安全原因，Service Workers 要求要在必须在 HTTPS 下才能运行。Github 是个用来测试的好地方，因为它就支持HTTPS。为了便于本地开发，localhost 也被浏览器认为是安全源。\n\n## 如何使用\n### 注册service worker\n```javascript\n/**\n * @scriptURL ServiceWorker脚本资源路径(可以是绝对或者相对当前URL的路径)\n * @options {scope: './'} scope是一个路径,默认值就是'./',它总是相对于ServiceWorker脚本资源路径的,scope指定了一个ServiceWorker的生效范围,只有在这个路径范围内的资源才能支持离线访问(所以跨域的资源是没法离线访问的)\n */\nServiceWorkerContainer.register(scriptURL, options)\n    .then(\n        function(ServiceWorkerRegistration) {\n            // do something\n        }\n);\n```\n代码如下:\n```javascript\n//兼容性判断\nif ('serviceWorker' in navigator) {\n    navigator.serviceWorker.register('sw.js', {scope: './'}).then(function(reg) {\n        if (reg.installing) {\n            console.log('Service worker installing');\n        } else if (reg.waiting) {\n            console.log('Service worker installed');\n        } else if (reg.active) {\n            console.log('Service worker active');\n        }\n    }).catch(function(error) {\n        // registration failed\n        console.log('Registration failed with ' + error);\n    });\n}\n```\n事实上当浏览器运行上面的代码时, 会先检测是否之前就获取并注册过**sw.js**\n* 如果是**首次运行**,那就先下载并保存在本地, chrome中可以在*Application -> Service Workers*面板中查看\n![](https://lh2907883.github.io/store/blog/web%E7%A6%BB%E7%BA%BF%E5%BA%94%E7%94%A8/3.png)\n这时会触发Service Worker的``install``事件,之后会进入``navigator.serviceWorker.register``返回的``Promise.then``,状态``state``为``installing``. \n* 如果发现本地已经有**sw.js** *(即使本地的**sw.js**不是最新代码,这次访问任然会使用本地**sw.js**的代码)*,那么会直接进入``navigator.serviceWorker.register``返回的``Promise.then``,状态``state``为``activated``,这时Service Worker为已激活状态,后面只要是有``scope``范围内的请求都会被Service Worker的``fetch``事件拦截*(注意:如果在scope下的html页面访问了跨域的资源,比如图片什么的,那这个跨域资源请求也会被拦截)*,在``fetch``的回调函数里面你可以自行控制是**读缓存**,还是**请求网络**,你甚至可以**伪造响应数据** *(我想这也是为什么Service Worker只支持HTTPS的原因)*\n* 如果发现本地已经有**sw.js**并且本地的**sw.js**不是最新代码,那么**sw.js**会自动更新,并触发Service Worker的``install``事件,在下次访问页面时将使用新版本的**sw.js**.\n\n### 关于sw.js\n#### sw.js的职责\n从上面的描述,我们可以看出**sw.js**的职责其实是控制web应用中资源的访问策略,他和具体的业务逻辑,UI操作都没有任何关系,官方说明:\n> 如果注册成功，service worker 就在 [ServiceWorkerGlobalScope](https://developer.mozilla.org/zh-CN/docs/Web/API/ServiceWorkerGlobalScope) 环境中运行； 这是一个特殊类型的 woker 上下文运行环境，与主运行线程（执行脚本）相独立，同时也没有访问 DOM 的能力。\n\n#### 具体实现\n* 注册install事件\n```javascript\nthis.addEventListener('install', function(event) {\n    //console.log('sw.js install');\n    event.waitUntil(\n        caches.open('v1').then(function(cache) {\n            return cache.addAll([\n                '/demo/service-workers/',\n                '/demo/service-workers/index.html',\n                '/demo/service-workers/js/main.js',\n                '/demo/service-workers/json/data.json',\n                '/demo/service-workers/images/1.jpg',\n                '/demo/service-workers/images/2.jpg',\n            ]);\n        })\n    );\n});\n```\n> install 事件一般是被用来填充你的浏览器的离线缓存能力。为了达成这个目的，我们使用了 Service Worker 的 新的标志性的存储 [API — cache](https://developer.mozilla.org/zh-CN/docs/Web/API/Cache) — 一个 service worker 上的全局对象，它使我们可以存储网络响应发来的资源，并且根据它们的请求来生成key。这个 API 和浏览器的标准的缓存工作原理很相似，但是是特定你的域的。它会一直持久存在，直到你告诉它不再存储，你拥有全部的控制权。\n> 注意:  Cache API  并不被每个浏览器支持。（查看 Browser support  部分了解更多信息。） 如果你现在就想使用它，可以考虑采用一个 polyfill，比如 [Google topeka demo](https://github.com/Polymer/topeka/blob/master/sw.js)，或者把你的资源存储在 [IndexedDB](https://developer.mozilla.org/zh-CN/docs/Glossary/IndexedDB) 中。\n\n缓存方案有很多种, 示例代码中采用``Cache``, 值得注意的是``cache.addAll``可不仅仅只是记录需要缓存的资源URL列表, 它同时还会``fetch``这些资源把响应数据缓存起来,以便后面访问的时候使用 *(如果是一个复杂的web应用,个人觉得有些不太合理,谁又会在页面刚刚进来时就加载所有资源呢?)*\n\n* 注册fetch事件\n```javascript\nthis.addEventListener('fetch', function(event) {\n    //console.log(event.request);\n    //console.log(caches);\n    event.respondWith(\n        caches.match(event.request)\n        .catch(function() {\n            return fetch(event.request);\n        }).then(function(response) {\n            //console.log(response);\n            caches.open('v1').then(function(cache) {\n                //console.log(cache);\n                cache.put(event.request, response);\n            });\n            return response.clone();\n        })\n    );\n});\n```\n1. ``event.respondWith``接受一个返回response响应的Promise\n2. ``caches.match``会尝试在缓存中匹配当前fetch的请求,匹配到了就直接返回response\n3. ``cache.put``则是更新缓存\n\n* 注册activate事件\n```javascript\nthis.addEventListener('activate', function(event) {\n    var cacheWhitelist = ['v2'];\n\n    event.waitUntil(\n        caches.keys().then(function(keyList) {\n            return Promise.all(keyList.map(function(key) {\n                if (cacheWhitelist.indexOf(key) === -1) {\n                    return caches.delete(key);\n                }\n            }));\n        })\n    );\n});\n```\nactivate事件回调一般被用来删除旧的缓存\n\n#### 改进后的代码\n```javascript\nthis.addEventListener('install', function(event) {\n    console.log('sw.js install');\n    event.waitUntil(\n        //这里先不往缓存中写\n        caches.open('v1').then(function(cache) {\n            return cache.addAll([\n                // '/demo/service-workers/',\n                // '/demo/service-workers/index.html',\n                // '/demo/service-workers/js/main.js',\n                // '/demo/service-workers/json/data.json',\n                // '/demo/service-workers/images/1.jpg',\n                // '/demo/service-workers/images/2.jpg',\n                // '/demo/service-workers/child.html',\n            ]);\n        })\n    );\n});\nthis.addEventListener('fetch', function(event) {\n    event.respondWith(\n        caches.match(event.request)\n        .then(function(response) {\n            if (response) {\n                //如果匹配到了\n                return response;\n            } else {\n                //如果有资源没有匹配(比如child.html里面的跨域图片),就先发请求访问,然后缓存一份\n                console.log('url not match;' + event.request.url);\n                return fetch(event.request).then(function(response) {\n                    console.log(response);\n                    caches.open('v1').then(function(cache) {\n                        cache.put(event.request, response);\n                    });\n                    return response.clone();\n                });\n            }\n        })\n        .catch(function() {\n            return fetch(event.request);\n        })\n    );\n});\nthis.addEventListener('activate', function(event) {\n    console.log('activate')\n});\n```\n[演示地址](https://lh2907883.github.io/store/demo/service-workers/)\n\n## 参考资料\n* [MDN 使用 Service Workers](https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API/Using_Service_Workers)\n","slug":"web离线应用","published":1,"updated":"2017-05-14T09:02:29.000Z","_id":"cj2oermi00000vytxlkmlsfuy","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"什么是web离线应用\"><a href=\"#什么是web离线应用\" class=\"headerlink\" title=\"什么是web离线应用\"></a>什么是web离线应用</h2><p>在正常情况下,客户端使用HTTP协议通过网络得到服务器的资源,然后展示,但是如果在网络断开的情况下,客户端就没办法了,这时就需要一种技术去解决这一问题,目前有两种方式:<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Using_the_application_cache\" target=\"_blank\" rel=\"external\">AppCache</a>和<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API/Using_Service_Workers#Browser_compatibility\" target=\"_blank\" rel=\"external\">Service Workers</a>,他们都是通过在断网时读取本地缓存资源来实现web应用的离线访问的.</p>\n<h2 id=\"比较AppCache和Service-Workers\"><a href=\"#比较AppCache和Service-Workers\" class=\"headerlink\" title=\"比较AppCache和Service Workers\"></a>比较AppCache和Service Workers</h2><h3 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h3><p>AppCache通过指定缓存清单文件来设置哪些资源需要被缓存</p>\n<p>Service Workers则有更新强大的API来通过脚本精准控制缓存(包括更新,追加,删除缓存)</p>\n<h3 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h3><p>下图是各大浏览器对AppCache的支持情况,可以看出基本都支持<br><img src=\"https://lh2907883.github.io/store/blog/web%E7%A6%BB%E7%BA%BF%E5%BA%94%E7%94%A8/1.png\" alt=\"\"></p>\n<p>而Service Workers还是有一部分浏览器不支持的(特别是移动平台)<br><img src=\"https://lh2907883.github.io/store/blog/web%E7%A6%BB%E7%BA%BF%E5%BA%94%E7%94%A8/2.png\" alt=\"\"></p>\n<h3 id=\"W3C标准\"><a href=\"#W3C标准\" class=\"headerlink\" title=\"W3C标准\"></a>W3C标准</h3><p>如果你看过<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Using_the_application_cache\" target=\"_blank\" rel=\"external\">AppCache</a>的文档,你会发现</p>\n<blockquote>\n<p>该特性已经从Web标准中删除，虽然一些浏览器目前仍然支持它，但也许会在未来的某个时间停止支持，请尽量不要使用该特性。</p>\n<p>在此刻使用这里描述的应用程序缓存功能高度不鼓励; 它正在处于从Web平台中被删除的过程。请改用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API/Using_Service_Workers#Browser_compatibility\" target=\"_blank\" rel=\"external\">Service Workers</a>代替。</p>\n</blockquote>\n<p>我个人认为Service Workers各方面都要优于AppCache,除了兼容性,不过既然Service Workers已经是W3C标准,想必未来的支持情况应该会好一些,所以下面我们将详细讨论Service Workers的用法</p>\n<h2 id=\"使用Service-Workers的前提条件\"><a href=\"#使用Service-Workers的前提条件\" class=\"headerlink\" title=\"使用Service Workers的前提条件\"></a>使用Service Workers的前提条件</h2><blockquote>\n<p>在已经支持 serivce workers 的浏览器的版本中, 很多特性没有默认开启, 需要开启一下浏览器的相关配置：</p>\n<ul>\n<li>Firefox Nightly: 访问 about:config 并设置 dom.serviceWorkers.enabled 的值为 true; 重启浏览器；</li>\n<li>Chrome Canary: 访问 chrome://flags 并开启 experimental-web-platform-features; 重启浏览器 (注意：有些特性在Chrome中没有默认开放支持)；</li>\n<li>Opera: 访问 opera://flags 并开启 ServiceWorker 的支持; 重启浏览器。 </li>\n</ul>\n<p>另外，你需要通过 <strong>HTTPS</strong> 来访问你的页面 — 出于安全原因，Service Workers 要求要在必须在 HTTPS 下才能运行。Github 是个用来测试的好地方，因为它就支持HTTPS。为了便于本地开发，localhost 也被浏览器认为是安全源。</p>\n</blockquote>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><h3 id=\"注册service-worker\"><a href=\"#注册service-worker\" class=\"headerlink\" title=\"注册service worker\"></a>注册service worker</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @scriptURL ServiceWorker脚本资源路径(可以是绝对或者相对当前URL的路径)</div><div class=\"line\"> * @options &#123;scope: './'&#125; scope是一个路径,默认值就是'./',它总是相对于ServiceWorker脚本资源路径的,scope指定了一个ServiceWorker的生效范围,只有在这个路径范围内的资源才能支持离线访问(所以跨域的资源是没法离线访问的)</div><div class=\"line\"> */</div><div class=\"line\">ServiceWorkerContainer.register(scriptURL, options)</div><div class=\"line\">    .then(</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ServiceWorkerRegistration</span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// do something</span></div><div class=\"line\">        &#125;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p>代码如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//兼容性判断</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">'serviceWorker'</span> <span class=\"keyword\">in</span> navigator) &#123;</div><div class=\"line\">    navigator.serviceWorker.register(<span class=\"string\">'sw.js'</span>, &#123;<span class=\"attr\">scope</span>: <span class=\"string\">'./'</span>&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reg</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (reg.installing) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'Service worker installing'</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (reg.waiting) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'Service worker installed'</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (reg.active) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'Service worker active'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// registration failed</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Registration failed with '</span> + error);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>事实上当浏览器运行上面的代码时, 会先检测是否之前就获取并注册过<strong>sw.js</strong></p>\n<ul>\n<li>如果是<strong>首次运行</strong>,那就先下载并保存在本地, chrome中可以在<em>Application -&gt; Service Workers</em>面板中查看<br><img src=\"https://lh2907883.github.io/store/blog/web%E7%A6%BB%E7%BA%BF%E5%BA%94%E7%94%A8/3.png\" alt=\"\"><br>这时会触发Service Worker的<code>install</code>事件,之后会进入<code>navigator.serviceWorker.register</code>返回的<code>Promise.then</code>,状态<code>state</code>为<code>installing</code>. </li>\n<li>如果发现本地已经有<strong>sw.js</strong> <em>(即使本地的<strong>sw.js</strong>不是最新代码,这次访问任然会使用本地<strong>sw.js</strong>的代码)</em>,那么会直接进入<code>navigator.serviceWorker.register</code>返回的<code>Promise.then</code>,状态<code>state</code>为<code>activated</code>,这时Service Worker为已激活状态,后面只要是有<code>scope</code>范围内的请求都会被Service Worker的<code>fetch</code>事件拦截<em>(注意:如果在scope下的html页面访问了跨域的资源,比如图片什么的,那这个跨域资源请求也会被拦截)</em>,在<code>fetch</code>的回调函数里面你可以自行控制是<strong>读缓存</strong>,还是<strong>请求网络</strong>,你甚至可以<strong>伪造响应数据</strong> <em>(我想这也是为什么Service Worker只支持HTTPS的原因)</em></li>\n<li>如果发现本地已经有<strong>sw.js</strong>并且本地的<strong>sw.js</strong>不是最新代码,那么<strong>sw.js</strong>会自动更新,并触发Service Worker的<code>install</code>事件,在下次访问页面时将使用新版本的<strong>sw.js</strong>.</li>\n</ul>\n<h3 id=\"关于sw-js\"><a href=\"#关于sw-js\" class=\"headerlink\" title=\"关于sw.js\"></a>关于sw.js</h3><h4 id=\"sw-js的职责\"><a href=\"#sw-js的职责\" class=\"headerlink\" title=\"sw.js的职责\"></a>sw.js的职责</h4><p>从上面的描述,我们可以看出<strong>sw.js</strong>的职责其实是控制web应用中资源的访问策略,他和具体的业务逻辑,UI操作都没有任何关系,官方说明:</p>\n<blockquote>\n<p>如果注册成功，service worker 就在 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/ServiceWorkerGlobalScope\" target=\"_blank\" rel=\"external\">ServiceWorkerGlobalScope</a> 环境中运行； 这是一个特殊类型的 woker 上下文运行环境，与主运行线程（执行脚本）相独立，同时也没有访问 DOM 的能力。</p>\n</blockquote>\n<h4 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h4><ul>\n<li>注册install事件<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.addEventListener(<span class=\"string\">'install'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//console.log('sw.js install');</span></div><div class=\"line\">    event.waitUntil(</div><div class=\"line\">        caches.open(<span class=\"string\">'v1'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cache</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> cache.addAll([</div><div class=\"line\">                <span class=\"string\">'/demo/service-workers/'</span>,</div><div class=\"line\">                <span class=\"string\">'/demo/service-workers/index.html'</span>,</div><div class=\"line\">                <span class=\"string\">'/demo/service-workers/js/main.js'</span>,</div><div class=\"line\">                <span class=\"string\">'/demo/service-workers/json/data.json'</span>,</div><div class=\"line\">                <span class=\"string\">'/demo/service-workers/images/1.jpg'</span>,</div><div class=\"line\">                <span class=\"string\">'/demo/service-workers/images/2.jpg'</span>,</div><div class=\"line\">            ]);</div><div class=\"line\">        &#125;)</div><div class=\"line\">    );</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>install 事件一般是被用来填充你的浏览器的离线缓存能力。为了达成这个目的，我们使用了 Service Worker 的 新的标志性的存储 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Cache\" target=\"_blank\" rel=\"external\">API — cache</a> — 一个 service worker 上的全局对象，它使我们可以存储网络响应发来的资源，并且根据它们的请求来生成key。这个 API 和浏览器的标准的缓存工作原理很相似，但是是特定你的域的。它会一直持久存在，直到你告诉它不再存储，你拥有全部的控制权。<br>注意:  Cache API  并不被每个浏览器支持。（查看 Browser support  部分了解更多信息。） 如果你现在就想使用它，可以考虑采用一个 polyfill，比如 <a href=\"https://github.com/Polymer/topeka/blob/master/sw.js\" target=\"_blank\" rel=\"external\">Google topeka demo</a>，或者把你的资源存储在 <a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/IndexedDB\" target=\"_blank\" rel=\"external\">IndexedDB</a> 中。</p>\n</blockquote>\n<p>缓存方案有很多种, 示例代码中采用<code>Cache</code>, 值得注意的是<code>cache.addAll</code>可不仅仅只是记录需要缓存的资源URL列表, 它同时还会<code>fetch</code>这些资源把响应数据缓存起来,以便后面访问的时候使用 <em>(如果是一个复杂的web应用,个人觉得有些不太合理,谁又会在页面刚刚进来时就加载所有资源呢?)</em></p>\n<ul>\n<li>注册fetch事件<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.addEventListener(<span class=\"string\">'fetch'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//console.log(event.request);</span></div><div class=\"line\">    <span class=\"comment\">//console.log(caches);</span></div><div class=\"line\">    event.respondWith(</div><div class=\"line\">        caches.match(event.request)</div><div class=\"line\">        .catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> fetch(event.request);</div><div class=\"line\">        &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">//console.log(response);</span></div><div class=\"line\">            caches.open(<span class=\"string\">'v1'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cache</span>) </span>&#123;</div><div class=\"line\">                <span class=\"comment\">//console.log(cache);</span></div><div class=\"line\">                cache.put(event.request, response);</div><div class=\"line\">            &#125;);</div><div class=\"line\">            <span class=\"keyword\">return</span> response.clone();</div><div class=\"line\">        &#125;)</div><div class=\"line\">    );</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li><code>event.respondWith</code>接受一个返回response响应的Promise</li>\n<li><code>caches.match</code>会尝试在缓存中匹配当前fetch的请求,匹配到了就直接返回response</li>\n<li><code>cache.put</code>则是更新缓存</li>\n</ol>\n<ul>\n<li>注册activate事件<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.addEventListener(<span class=\"string\">'activate'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> cacheWhitelist = [<span class=\"string\">'v2'</span>];</div><div class=\"line\"></div><div class=\"line\">    event.waitUntil(</div><div class=\"line\">        caches.keys().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">keyList</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.all(keyList.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (cacheWhitelist.indexOf(key) === <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> caches.delete(key);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;));</div><div class=\"line\">        &#125;)</div><div class=\"line\">    );</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>activate事件回调一般被用来删除旧的缓存</p>\n<h4 id=\"改进后的代码\"><a href=\"#改进后的代码\" class=\"headerlink\" title=\"改进后的代码\"></a>改进后的代码</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.addEventListener(<span class=\"string\">'install'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'sw.js install'</span>);</div><div class=\"line\">    event.waitUntil(</div><div class=\"line\">        <span class=\"comment\">//这里先不往缓存中写</span></div><div class=\"line\">        caches.open(<span class=\"string\">'v1'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cache</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> cache.addAll([</div><div class=\"line\">                <span class=\"comment\">// '/demo/service-workers/',</span></div><div class=\"line\">                <span class=\"comment\">// '/demo/service-workers/index.html',</span></div><div class=\"line\">                <span class=\"comment\">// '/demo/service-workers/js/main.js',</span></div><div class=\"line\">                <span class=\"comment\">// '/demo/service-workers/json/data.json',</span></div><div class=\"line\">                <span class=\"comment\">// '/demo/service-workers/images/1.jpg',</span></div><div class=\"line\">                <span class=\"comment\">// '/demo/service-workers/images/2.jpg',</span></div><div class=\"line\">                <span class=\"comment\">// '/demo/service-workers/child.html',</span></div><div class=\"line\">            ]);</div><div class=\"line\">        &#125;)</div><div class=\"line\">    );</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">this</span>.addEventListener(<span class=\"string\">'fetch'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">    event.respondWith(</div><div class=\"line\">        caches.match(event.request)</div><div class=\"line\">        .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (response) &#123;</div><div class=\"line\">                <span class=\"comment\">//如果匹配到了</span></div><div class=\"line\">                <span class=\"keyword\">return</span> response;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">//如果有资源没有匹配(比如child.html里面的跨域图片),就先发请求访问,然后缓存一份</span></div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'url not match;'</span> + event.request.url);</div><div class=\"line\">                <span class=\"keyword\">return</span> fetch(event.request).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">                    <span class=\"built_in\">console</span>.log(response);</div><div class=\"line\">                    caches.open(<span class=\"string\">'v1'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cache</span>) </span>&#123;</div><div class=\"line\">                        cache.put(event.request, response);</div><div class=\"line\">                    &#125;);</div><div class=\"line\">                    <span class=\"keyword\">return</span> response.clone();</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> fetch(event.request);</div><div class=\"line\">        &#125;)</div><div class=\"line\">    );</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">this</span>.addEventListener(<span class=\"string\">'activate'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'activate'</span>)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><a href=\"https://lh2907883.github.io/store/demo/service-workers/\">演示地址</a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API/Using_Service_Workers\" target=\"_blank\" rel=\"external\">MDN 使用 Service Workers</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是web离线应用\"><a href=\"#什么是web离线应用\" class=\"headerlink\" title=\"什么是web离线应用\"></a>什么是web离线应用</h2><p>在正常情况下,客户端使用HTTP协议通过网络得到服务器的资源,然后展示,但是如果在网络断开的情况下,客户端就没办法了,这时就需要一种技术去解决这一问题,目前有两种方式:<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Using_the_application_cache\" target=\"_blank\" rel=\"external\">AppCache</a>和<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API/Using_Service_Workers#Browser_compatibility\" target=\"_blank\" rel=\"external\">Service Workers</a>,他们都是通过在断网时读取本地缓存资源来实现web应用的离线访问的.</p>\n<h2 id=\"比较AppCache和Service-Workers\"><a href=\"#比较AppCache和Service-Workers\" class=\"headerlink\" title=\"比较AppCache和Service Workers\"></a>比较AppCache和Service Workers</h2><h3 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h3><p>AppCache通过指定缓存清单文件来设置哪些资源需要被缓存</p>\n<p>Service Workers则有更新强大的API来通过脚本精准控制缓存(包括更新,追加,删除缓存)</p>\n<h3 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h3><p>下图是各大浏览器对AppCache的支持情况,可以看出基本都支持<br><img src=\"https://lh2907883.github.io/store/blog/web%E7%A6%BB%E7%BA%BF%E5%BA%94%E7%94%A8/1.png\" alt=\"\"></p>\n<p>而Service Workers还是有一部分浏览器不支持的(特别是移动平台)<br><img src=\"https://lh2907883.github.io/store/blog/web%E7%A6%BB%E7%BA%BF%E5%BA%94%E7%94%A8/2.png\" alt=\"\"></p>\n<h3 id=\"W3C标准\"><a href=\"#W3C标准\" class=\"headerlink\" title=\"W3C标准\"></a>W3C标准</h3><p>如果你看过<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Using_the_application_cache\" target=\"_blank\" rel=\"external\">AppCache</a>的文档,你会发现</p>\n<blockquote>\n<p>该特性已经从Web标准中删除，虽然一些浏览器目前仍然支持它，但也许会在未来的某个时间停止支持，请尽量不要使用该特性。</p>\n<p>在此刻使用这里描述的应用程序缓存功能高度不鼓励; 它正在处于从Web平台中被删除的过程。请改用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API/Using_Service_Workers#Browser_compatibility\" target=\"_blank\" rel=\"external\">Service Workers</a>代替。</p>\n</blockquote>\n<p>我个人认为Service Workers各方面都要优于AppCache,除了兼容性,不过既然Service Workers已经是W3C标准,想必未来的支持情况应该会好一些,所以下面我们将详细讨论Service Workers的用法</p>\n<h2 id=\"使用Service-Workers的前提条件\"><a href=\"#使用Service-Workers的前提条件\" class=\"headerlink\" title=\"使用Service Workers的前提条件\"></a>使用Service Workers的前提条件</h2><blockquote>\n<p>在已经支持 serivce workers 的浏览器的版本中, 很多特性没有默认开启, 需要开启一下浏览器的相关配置：</p>\n<ul>\n<li>Firefox Nightly: 访问 about:config 并设置 dom.serviceWorkers.enabled 的值为 true; 重启浏览器；</li>\n<li>Chrome Canary: 访问 chrome://flags 并开启 experimental-web-platform-features; 重启浏览器 (注意：有些特性在Chrome中没有默认开放支持)；</li>\n<li>Opera: 访问 opera://flags 并开启 ServiceWorker 的支持; 重启浏览器。 </li>\n</ul>\n<p>另外，你需要通过 <strong>HTTPS</strong> 来访问你的页面 — 出于安全原因，Service Workers 要求要在必须在 HTTPS 下才能运行。Github 是个用来测试的好地方，因为它就支持HTTPS。为了便于本地开发，localhost 也被浏览器认为是安全源。</p>\n</blockquote>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><h3 id=\"注册service-worker\"><a href=\"#注册service-worker\" class=\"headerlink\" title=\"注册service worker\"></a>注册service worker</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * @scriptURL ServiceWorker脚本资源路径(可以是绝对或者相对当前URL的路径)</div><div class=\"line\"> * @options &#123;scope: './'&#125; scope是一个路径,默认值就是'./',它总是相对于ServiceWorker脚本资源路径的,scope指定了一个ServiceWorker的生效范围,只有在这个路径范围内的资源才能支持离线访问(所以跨域的资源是没法离线访问的)</div><div class=\"line\"> */</div><div class=\"line\">ServiceWorkerContainer.register(scriptURL, options)</div><div class=\"line\">    .then(</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ServiceWorkerRegistration</span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// do something</span></div><div class=\"line\">        &#125;</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<p>代码如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//兼容性判断</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">'serviceWorker'</span> <span class=\"keyword\">in</span> navigator) &#123;</div><div class=\"line\">    navigator.serviceWorker.register(<span class=\"string\">'sw.js'</span>, &#123;<span class=\"attr\">scope</span>: <span class=\"string\">'./'</span>&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reg</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (reg.installing) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'Service worker installing'</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (reg.waiting) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'Service worker installed'</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (reg.active) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'Service worker active'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// registration failed</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Registration failed with '</span> + error);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>事实上当浏览器运行上面的代码时, 会先检测是否之前就获取并注册过<strong>sw.js</strong></p>\n<ul>\n<li>如果是<strong>首次运行</strong>,那就先下载并保存在本地, chrome中可以在<em>Application -&gt; Service Workers</em>面板中查看<br><img src=\"https://lh2907883.github.io/store/blog/web%E7%A6%BB%E7%BA%BF%E5%BA%94%E7%94%A8/3.png\" alt=\"\"><br>这时会触发Service Worker的<code>install</code>事件,之后会进入<code>navigator.serviceWorker.register</code>返回的<code>Promise.then</code>,状态<code>state</code>为<code>installing</code>. </li>\n<li>如果发现本地已经有<strong>sw.js</strong> <em>(即使本地的<strong>sw.js</strong>不是最新代码,这次访问任然会使用本地<strong>sw.js</strong>的代码)</em>,那么会直接进入<code>navigator.serviceWorker.register</code>返回的<code>Promise.then</code>,状态<code>state</code>为<code>activated</code>,这时Service Worker为已激活状态,后面只要是有<code>scope</code>范围内的请求都会被Service Worker的<code>fetch</code>事件拦截<em>(注意:如果在scope下的html页面访问了跨域的资源,比如图片什么的,那这个跨域资源请求也会被拦截)</em>,在<code>fetch</code>的回调函数里面你可以自行控制是<strong>读缓存</strong>,还是<strong>请求网络</strong>,你甚至可以<strong>伪造响应数据</strong> <em>(我想这也是为什么Service Worker只支持HTTPS的原因)</em></li>\n<li>如果发现本地已经有<strong>sw.js</strong>并且本地的<strong>sw.js</strong>不是最新代码,那么<strong>sw.js</strong>会自动更新,并触发Service Worker的<code>install</code>事件,在下次访问页面时将使用新版本的<strong>sw.js</strong>.</li>\n</ul>\n<h3 id=\"关于sw-js\"><a href=\"#关于sw-js\" class=\"headerlink\" title=\"关于sw.js\"></a>关于sw.js</h3><h4 id=\"sw-js的职责\"><a href=\"#sw-js的职责\" class=\"headerlink\" title=\"sw.js的职责\"></a>sw.js的职责</h4><p>从上面的描述,我们可以看出<strong>sw.js</strong>的职责其实是控制web应用中资源的访问策略,他和具体的业务逻辑,UI操作都没有任何关系,官方说明:</p>\n<blockquote>\n<p>如果注册成功，service worker 就在 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/ServiceWorkerGlobalScope\" target=\"_blank\" rel=\"external\">ServiceWorkerGlobalScope</a> 环境中运行； 这是一个特殊类型的 woker 上下文运行环境，与主运行线程（执行脚本）相独立，同时也没有访问 DOM 的能力。</p>\n</blockquote>\n<h4 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h4><ul>\n<li>注册install事件<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.addEventListener(<span class=\"string\">'install'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//console.log('sw.js install');</span></div><div class=\"line\">    event.waitUntil(</div><div class=\"line\">        caches.open(<span class=\"string\">'v1'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cache</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> cache.addAll([</div><div class=\"line\">                <span class=\"string\">'/demo/service-workers/'</span>,</div><div class=\"line\">                <span class=\"string\">'/demo/service-workers/index.html'</span>,</div><div class=\"line\">                <span class=\"string\">'/demo/service-workers/js/main.js'</span>,</div><div class=\"line\">                <span class=\"string\">'/demo/service-workers/json/data.json'</span>,</div><div class=\"line\">                <span class=\"string\">'/demo/service-workers/images/1.jpg'</span>,</div><div class=\"line\">                <span class=\"string\">'/demo/service-workers/images/2.jpg'</span>,</div><div class=\"line\">            ]);</div><div class=\"line\">        &#125;)</div><div class=\"line\">    );</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>install 事件一般是被用来填充你的浏览器的离线缓存能力。为了达成这个目的，我们使用了 Service Worker 的 新的标志性的存储 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Cache\" target=\"_blank\" rel=\"external\">API — cache</a> — 一个 service worker 上的全局对象，它使我们可以存储网络响应发来的资源，并且根据它们的请求来生成key。这个 API 和浏览器的标准的缓存工作原理很相似，但是是特定你的域的。它会一直持久存在，直到你告诉它不再存储，你拥有全部的控制权。<br>注意:  Cache API  并不被每个浏览器支持。（查看 Browser support  部分了解更多信息。） 如果你现在就想使用它，可以考虑采用一个 polyfill，比如 <a href=\"https://github.com/Polymer/topeka/blob/master/sw.js\" target=\"_blank\" rel=\"external\">Google topeka demo</a>，或者把你的资源存储在 <a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/IndexedDB\" target=\"_blank\" rel=\"external\">IndexedDB</a> 中。</p>\n</blockquote>\n<p>缓存方案有很多种, 示例代码中采用<code>Cache</code>, 值得注意的是<code>cache.addAll</code>可不仅仅只是记录需要缓存的资源URL列表, 它同时还会<code>fetch</code>这些资源把响应数据缓存起来,以便后面访问的时候使用 <em>(如果是一个复杂的web应用,个人觉得有些不太合理,谁又会在页面刚刚进来时就加载所有资源呢?)</em></p>\n<ul>\n<li>注册fetch事件<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.addEventListener(<span class=\"string\">'fetch'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//console.log(event.request);</span></div><div class=\"line\">    <span class=\"comment\">//console.log(caches);</span></div><div class=\"line\">    event.respondWith(</div><div class=\"line\">        caches.match(event.request)</div><div class=\"line\">        .catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> fetch(event.request);</div><div class=\"line\">        &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">//console.log(response);</span></div><div class=\"line\">            caches.open(<span class=\"string\">'v1'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cache</span>) </span>&#123;</div><div class=\"line\">                <span class=\"comment\">//console.log(cache);</span></div><div class=\"line\">                cache.put(event.request, response);</div><div class=\"line\">            &#125;);</div><div class=\"line\">            <span class=\"keyword\">return</span> response.clone();</div><div class=\"line\">        &#125;)</div><div class=\"line\">    );</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li><code>event.respondWith</code>接受一个返回response响应的Promise</li>\n<li><code>caches.match</code>会尝试在缓存中匹配当前fetch的请求,匹配到了就直接返回response</li>\n<li><code>cache.put</code>则是更新缓存</li>\n</ol>\n<ul>\n<li>注册activate事件<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.addEventListener(<span class=\"string\">'activate'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> cacheWhitelist = [<span class=\"string\">'v2'</span>];</div><div class=\"line\"></div><div class=\"line\">    event.waitUntil(</div><div class=\"line\">        caches.keys().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">keyList</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.all(keyList.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (cacheWhitelist.indexOf(key) === <span class=\"number\">-1</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span> caches.delete(key);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;));</div><div class=\"line\">        &#125;)</div><div class=\"line\">    );</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>activate事件回调一般被用来删除旧的缓存</p>\n<h4 id=\"改进后的代码\"><a href=\"#改进后的代码\" class=\"headerlink\" title=\"改进后的代码\"></a>改进后的代码</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">this</span>.addEventListener(<span class=\"string\">'install'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'sw.js install'</span>);</div><div class=\"line\">    event.waitUntil(</div><div class=\"line\">        <span class=\"comment\">//这里先不往缓存中写</span></div><div class=\"line\">        caches.open(<span class=\"string\">'v1'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cache</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> cache.addAll([</div><div class=\"line\">                <span class=\"comment\">// '/demo/service-workers/',</span></div><div class=\"line\">                <span class=\"comment\">// '/demo/service-workers/index.html',</span></div><div class=\"line\">                <span class=\"comment\">// '/demo/service-workers/js/main.js',</span></div><div class=\"line\">                <span class=\"comment\">// '/demo/service-workers/json/data.json',</span></div><div class=\"line\">                <span class=\"comment\">// '/demo/service-workers/images/1.jpg',</span></div><div class=\"line\">                <span class=\"comment\">// '/demo/service-workers/images/2.jpg',</span></div><div class=\"line\">                <span class=\"comment\">// '/demo/service-workers/child.html',</span></div><div class=\"line\">            ]);</div><div class=\"line\">        &#125;)</div><div class=\"line\">    );</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">this</span>.addEventListener(<span class=\"string\">'fetch'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">    event.respondWith(</div><div class=\"line\">        caches.match(event.request)</div><div class=\"line\">        .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (response) &#123;</div><div class=\"line\">                <span class=\"comment\">//如果匹配到了</span></div><div class=\"line\">                <span class=\"keyword\">return</span> response;</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                <span class=\"comment\">//如果有资源没有匹配(比如child.html里面的跨域图片),就先发请求访问,然后缓存一份</span></div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'url not match;'</span> + event.request.url);</div><div class=\"line\">                <span class=\"keyword\">return</span> fetch(event.request).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">                    <span class=\"built_in\">console</span>.log(response);</div><div class=\"line\">                    caches.open(<span class=\"string\">'v1'</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">cache</span>) </span>&#123;</div><div class=\"line\">                        cache.put(event.request, response);</div><div class=\"line\">                    &#125;);</div><div class=\"line\">                    <span class=\"keyword\">return</span> response.clone();</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> fetch(event.request);</div><div class=\"line\">        &#125;)</div><div class=\"line\">    );</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"keyword\">this</span>.addEventListener(<span class=\"string\">'activate'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'activate'</span>)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><a href=\"https://lh2907883.github.io/store/demo/service-workers/\">演示地址</a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API/Using_Service_Workers\" target=\"_blank\" rel=\"external\">MDN 使用 Service Workers</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj2n3r71e000410txnc27anrb","tag_id":"cj2n3r71k000510tx2z980zus","_id":"cj2n3r71q000610txvv1lfjl5"},{"post_id":"cj2oermi00000vytxlkmlsfuy","tag_id":"cj2n3r71k000510tx2z980zus","_id":"cj2oermi20001vytx3d1ko5px"}],"Tag":[{"name":"javascript","_id":"cj2n3r71k000510tx2z980zus"}]}}